// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  recipe: (where?: RecipeWhereInput) => Promise<boolean>;
  recipeList: (where?: RecipeListWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  dietLabel: (where?: dietLabelWhereInput) => Promise<boolean>;
  healthLabel: (where?: healthLabelWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  recipe: (where: RecipeWhereUniqueInput) => RecipeNullablePromise;
  recipes: (args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Recipe>;
  recipesConnection: (args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecipeConnectionPromise;
  recipeList: (where: RecipeListWhereUniqueInput) => RecipeListNullablePromise;
  recipeLists: (args?: {
    where?: RecipeListWhereInput;
    orderBy?: RecipeListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RecipeList>;
  recipeListsConnection: (args?: {
    where?: RecipeListWhereInput;
    orderBy?: RecipeListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecipeListConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  dietLabel: (where: dietLabelWhereUniqueInput) => dietLabelNullablePromise;
  dietLabels: (args?: {
    where?: dietLabelWhereInput;
    orderBy?: dietLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<dietLabel>;
  dietLabelsConnection: (args?: {
    where?: dietLabelWhereInput;
    orderBy?: dietLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => dietLabelConnectionPromise;
  healthLabel: (
    where: healthLabelWhereUniqueInput
  ) => healthLabelNullablePromise;
  healthLabels: (args?: {
    where?: healthLabelWhereInput;
    orderBy?: healthLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<healthLabel>;
  healthLabelsConnection: (args?: {
    where?: healthLabelWhereInput;
    orderBy?: healthLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => healthLabelConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createRecipe: (data: RecipeCreateInput) => RecipePromise;
  updateRecipe: (args: {
    data: RecipeUpdateInput;
    where: RecipeWhereUniqueInput;
  }) => RecipePromise;
  updateManyRecipes: (args: {
    data: RecipeUpdateManyMutationInput;
    where?: RecipeWhereInput;
  }) => BatchPayloadPromise;
  upsertRecipe: (args: {
    where: RecipeWhereUniqueInput;
    create: RecipeCreateInput;
    update: RecipeUpdateInput;
  }) => RecipePromise;
  deleteRecipe: (where: RecipeWhereUniqueInput) => RecipePromise;
  deleteManyRecipes: (where?: RecipeWhereInput) => BatchPayloadPromise;
  createRecipeList: (data: RecipeListCreateInput) => RecipeListPromise;
  updateRecipeList: (args: {
    data: RecipeListUpdateInput;
    where: RecipeListWhereUniqueInput;
  }) => RecipeListPromise;
  updateManyRecipeLists: (args: {
    data: RecipeListUpdateManyMutationInput;
    where?: RecipeListWhereInput;
  }) => BatchPayloadPromise;
  upsertRecipeList: (args: {
    where: RecipeListWhereUniqueInput;
    create: RecipeListCreateInput;
    update: RecipeListUpdateInput;
  }) => RecipeListPromise;
  deleteRecipeList: (where: RecipeListWhereUniqueInput) => RecipeListPromise;
  deleteManyRecipeLists: (where?: RecipeListWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createdietLabel: (data: dietLabelCreateInput) => dietLabelPromise;
  updatedietLabel: (args: {
    data: dietLabelUpdateInput;
    where: dietLabelWhereUniqueInput;
  }) => dietLabelPromise;
  updateManydietLabels: (args: {
    data: dietLabelUpdateManyMutationInput;
    where?: dietLabelWhereInput;
  }) => BatchPayloadPromise;
  upsertdietLabel: (args: {
    where: dietLabelWhereUniqueInput;
    create: dietLabelCreateInput;
    update: dietLabelUpdateInput;
  }) => dietLabelPromise;
  deletedietLabel: (where: dietLabelWhereUniqueInput) => dietLabelPromise;
  deleteManydietLabels: (where?: dietLabelWhereInput) => BatchPayloadPromise;
  createhealthLabel: (data: healthLabelCreateInput) => healthLabelPromise;
  updatehealthLabel: (args: {
    data: healthLabelUpdateInput;
    where: healthLabelWhereUniqueInput;
  }) => healthLabelPromise;
  updateManyhealthLabels: (args: {
    data: healthLabelUpdateManyMutationInput;
    where?: healthLabelWhereInput;
  }) => BatchPayloadPromise;
  upserthealthLabel: (args: {
    where: healthLabelWhereUniqueInput;
    create: healthLabelCreateInput;
    update: healthLabelUpdateInput;
  }) => healthLabelPromise;
  deletehealthLabel: (where: healthLabelWhereUniqueInput) => healthLabelPromise;
  deleteManyhealthLabels: (
    where?: healthLabelWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  recipe: (
    where?: RecipeSubscriptionWhereInput
  ) => RecipeSubscriptionPayloadSubscription;
  recipeList: (
    where?: RecipeListSubscriptionWhereInput
  ) => RecipeListSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  dietLabel: (
    where?: dietLabelSubscriptionWhereInput
  ) => dietLabelSubscriptionPayloadSubscription;
  healthLabel: (
    where?: healthLabelSubscriptionWhereInput
  ) => healthLabelSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type healthLabelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC";

export type dietLabelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC";

export type RecipeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC"
  | "encodedUri_ASC"
  | "encodedUri_DESC"
  | "image_ASC"
  | "image_DESC"
  | "source_ASC"
  | "source_DESC"
  | "sourceUrl_ASC"
  | "sourceUrl_DESC"
  | "servings_ASC"
  | "servings_DESC"
  | "ingredients_ASC"
  | "ingredients_DESC"
  | "calories_ASC"
  | "calories_DESC"
  | "totalWeight_ASC"
  | "totalWeight_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RecipeListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type RecipeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  encodedUri?: Maybe<String>;
}>;

export interface healthLabelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  AND?: Maybe<healthLabelWhereInput[] | healthLabelWhereInput>;
  OR?: Maybe<healthLabelWhereInput[] | healthLabelWhereInput>;
  NOT?: Maybe<healthLabelWhereInput[] | healthLabelWhereInput>;
}

export interface dietLabelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  AND?: Maybe<dietLabelWhereInput[] | dietLabelWhereInput>;
  OR?: Maybe<dietLabelWhereInput[] | dietLabelWhereInput>;
  NOT?: Maybe<dietLabelWhereInput[] | dietLabelWhereInput>;
}

export interface RecipeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  encodedUri?: Maybe<String>;
  encodedUri_not?: Maybe<String>;
  encodedUri_in?: Maybe<String[] | String>;
  encodedUri_not_in?: Maybe<String[] | String>;
  encodedUri_lt?: Maybe<String>;
  encodedUri_lte?: Maybe<String>;
  encodedUri_gt?: Maybe<String>;
  encodedUri_gte?: Maybe<String>;
  encodedUri_contains?: Maybe<String>;
  encodedUri_not_contains?: Maybe<String>;
  encodedUri_starts_with?: Maybe<String>;
  encodedUri_not_starts_with?: Maybe<String>;
  encodedUri_ends_with?: Maybe<String>;
  encodedUri_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  source?: Maybe<String>;
  source_not?: Maybe<String>;
  source_in?: Maybe<String[] | String>;
  source_not_in?: Maybe<String[] | String>;
  source_lt?: Maybe<String>;
  source_lte?: Maybe<String>;
  source_gt?: Maybe<String>;
  source_gte?: Maybe<String>;
  source_contains?: Maybe<String>;
  source_not_contains?: Maybe<String>;
  source_starts_with?: Maybe<String>;
  source_not_starts_with?: Maybe<String>;
  source_ends_with?: Maybe<String>;
  source_not_ends_with?: Maybe<String>;
  sourceUrl?: Maybe<String>;
  sourceUrl_not?: Maybe<String>;
  sourceUrl_in?: Maybe<String[] | String>;
  sourceUrl_not_in?: Maybe<String[] | String>;
  sourceUrl_lt?: Maybe<String>;
  sourceUrl_lte?: Maybe<String>;
  sourceUrl_gt?: Maybe<String>;
  sourceUrl_gte?: Maybe<String>;
  sourceUrl_contains?: Maybe<String>;
  sourceUrl_not_contains?: Maybe<String>;
  sourceUrl_starts_with?: Maybe<String>;
  sourceUrl_not_starts_with?: Maybe<String>;
  sourceUrl_ends_with?: Maybe<String>;
  sourceUrl_not_ends_with?: Maybe<String>;
  servings?: Maybe<Int>;
  servings_not?: Maybe<Int>;
  servings_in?: Maybe<Int[] | Int>;
  servings_not_in?: Maybe<Int[] | Int>;
  servings_lt?: Maybe<Int>;
  servings_lte?: Maybe<Int>;
  servings_gt?: Maybe<Int>;
  servings_gte?: Maybe<Int>;
  calories?: Maybe<Float>;
  calories_not?: Maybe<Float>;
  calories_in?: Maybe<Float[] | Float>;
  calories_not_in?: Maybe<Float[] | Float>;
  calories_lt?: Maybe<Float>;
  calories_lte?: Maybe<Float>;
  calories_gt?: Maybe<Float>;
  calories_gte?: Maybe<Float>;
  totalWeight?: Maybe<Float>;
  totalWeight_not?: Maybe<Float>;
  totalWeight_in?: Maybe<Float[] | Float>;
  totalWeight_not_in?: Maybe<Float[] | Float>;
  totalWeight_lt?: Maybe<Float>;
  totalWeight_lte?: Maybe<Float>;
  totalWeight_gt?: Maybe<Float>;
  totalWeight_gte?: Maybe<Float>;
  healthLabels_every?: Maybe<healthLabelWhereInput>;
  healthLabels_some?: Maybe<healthLabelWhereInput>;
  healthLabels_none?: Maybe<healthLabelWhereInput>;
  dietLabels_every?: Maybe<dietLabelWhereInput>;
  dietLabels_some?: Maybe<dietLabelWhereInput>;
  dietLabels_none?: Maybe<dietLabelWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RecipeWhereInput[] | RecipeWhereInput>;
  OR?: Maybe<RecipeWhereInput[] | RecipeWhereInput>;
  NOT?: Maybe<RecipeWhereInput[] | RecipeWhereInput>;
}

export type RecipeListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RecipeListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  recipes_every?: Maybe<RecipeWhereInput>;
  recipes_some?: Maybe<RecipeWhereInput>;
  recipes_none?: Maybe<RecipeWhereInput>;
  owner?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RecipeListWhereInput[] | RecipeListWhereInput>;
  OR?: Maybe<RecipeListWhereInput[] | RecipeListWhereInput>;
  NOT?: Maybe<RecipeListWhereInput[] | RecipeListWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  recipeLists_every?: Maybe<RecipeListWhereInput>;
  recipeLists_some?: Maybe<RecipeListWhereInput>;
  recipeLists_none?: Maybe<RecipeListWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type dietLabelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  label?: Maybe<String>;
}>;

export type healthLabelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  label?: Maybe<String>;
}>;

export interface RecipeCreateInput {
  id?: Maybe<ID_Input>;
  label: String;
  encodedUri: String;
  image: String;
  source: String;
  sourceUrl: String;
  servings: Int;
  ingredients: Json;
  calories: Float;
  totalWeight: Float;
  healthLabels?: Maybe<healthLabelCreateManyInput>;
  dietLabels?: Maybe<dietLabelCreateManyInput>;
}

export interface healthLabelCreateManyInput {
  create?: Maybe<healthLabelCreateInput[] | healthLabelCreateInput>;
  connect?: Maybe<healthLabelWhereUniqueInput[] | healthLabelWhereUniqueInput>;
}

export interface healthLabelCreateInput {
  id?: Maybe<ID_Input>;
  label: String;
}

export interface dietLabelCreateManyInput {
  create?: Maybe<dietLabelCreateInput[] | dietLabelCreateInput>;
  connect?: Maybe<dietLabelWhereUniqueInput[] | dietLabelWhereUniqueInput>;
}

export interface dietLabelCreateInput {
  id?: Maybe<ID_Input>;
  label: String;
}

export interface RecipeUpdateInput {
  label?: Maybe<String>;
  encodedUri?: Maybe<String>;
  image?: Maybe<String>;
  source?: Maybe<String>;
  sourceUrl?: Maybe<String>;
  servings?: Maybe<Int>;
  ingredients?: Maybe<Json>;
  calories?: Maybe<Float>;
  totalWeight?: Maybe<Float>;
  healthLabels?: Maybe<healthLabelUpdateManyInput>;
  dietLabels?: Maybe<dietLabelUpdateManyInput>;
}

export interface healthLabelUpdateManyInput {
  create?: Maybe<healthLabelCreateInput[] | healthLabelCreateInput>;
  update?: Maybe<
    | healthLabelUpdateWithWhereUniqueNestedInput[]
    | healthLabelUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | healthLabelUpsertWithWhereUniqueNestedInput[]
    | healthLabelUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<healthLabelWhereUniqueInput[] | healthLabelWhereUniqueInput>;
  connect?: Maybe<healthLabelWhereUniqueInput[] | healthLabelWhereUniqueInput>;
  set?: Maybe<healthLabelWhereUniqueInput[] | healthLabelWhereUniqueInput>;
  disconnect?: Maybe<
    healthLabelWhereUniqueInput[] | healthLabelWhereUniqueInput
  >;
  deleteMany?: Maybe<
    healthLabelScalarWhereInput[] | healthLabelScalarWhereInput
  >;
  updateMany?: Maybe<
    | healthLabelUpdateManyWithWhereNestedInput[]
    | healthLabelUpdateManyWithWhereNestedInput
  >;
}

export interface healthLabelUpdateWithWhereUniqueNestedInput {
  where: healthLabelWhereUniqueInput;
  data: healthLabelUpdateDataInput;
}

export interface healthLabelUpdateDataInput {
  label?: Maybe<String>;
}

export interface healthLabelUpsertWithWhereUniqueNestedInput {
  where: healthLabelWhereUniqueInput;
  update: healthLabelUpdateDataInput;
  create: healthLabelCreateInput;
}

export interface healthLabelScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  AND?: Maybe<healthLabelScalarWhereInput[] | healthLabelScalarWhereInput>;
  OR?: Maybe<healthLabelScalarWhereInput[] | healthLabelScalarWhereInput>;
  NOT?: Maybe<healthLabelScalarWhereInput[] | healthLabelScalarWhereInput>;
}

export interface healthLabelUpdateManyWithWhereNestedInput {
  where: healthLabelScalarWhereInput;
  data: healthLabelUpdateManyDataInput;
}

export interface healthLabelUpdateManyDataInput {
  label?: Maybe<String>;
}

export interface dietLabelUpdateManyInput {
  create?: Maybe<dietLabelCreateInput[] | dietLabelCreateInput>;
  update?: Maybe<
    | dietLabelUpdateWithWhereUniqueNestedInput[]
    | dietLabelUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | dietLabelUpsertWithWhereUniqueNestedInput[]
    | dietLabelUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<dietLabelWhereUniqueInput[] | dietLabelWhereUniqueInput>;
  connect?: Maybe<dietLabelWhereUniqueInput[] | dietLabelWhereUniqueInput>;
  set?: Maybe<dietLabelWhereUniqueInput[] | dietLabelWhereUniqueInput>;
  disconnect?: Maybe<dietLabelWhereUniqueInput[] | dietLabelWhereUniqueInput>;
  deleteMany?: Maybe<dietLabelScalarWhereInput[] | dietLabelScalarWhereInput>;
  updateMany?: Maybe<
    | dietLabelUpdateManyWithWhereNestedInput[]
    | dietLabelUpdateManyWithWhereNestedInput
  >;
}

export interface dietLabelUpdateWithWhereUniqueNestedInput {
  where: dietLabelWhereUniqueInput;
  data: dietLabelUpdateDataInput;
}

export interface dietLabelUpdateDataInput {
  label?: Maybe<String>;
}

export interface dietLabelUpsertWithWhereUniqueNestedInput {
  where: dietLabelWhereUniqueInput;
  update: dietLabelUpdateDataInput;
  create: dietLabelCreateInput;
}

export interface dietLabelScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  AND?: Maybe<dietLabelScalarWhereInput[] | dietLabelScalarWhereInput>;
  OR?: Maybe<dietLabelScalarWhereInput[] | dietLabelScalarWhereInput>;
  NOT?: Maybe<dietLabelScalarWhereInput[] | dietLabelScalarWhereInput>;
}

export interface dietLabelUpdateManyWithWhereNestedInput {
  where: dietLabelScalarWhereInput;
  data: dietLabelUpdateManyDataInput;
}

export interface dietLabelUpdateManyDataInput {
  label?: Maybe<String>;
}

export interface RecipeUpdateManyMutationInput {
  label?: Maybe<String>;
  encodedUri?: Maybe<String>;
  image?: Maybe<String>;
  source?: Maybe<String>;
  sourceUrl?: Maybe<String>;
  servings?: Maybe<Int>;
  ingredients?: Maybe<Json>;
  calories?: Maybe<Float>;
  totalWeight?: Maybe<Float>;
}

export interface RecipeListCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  recipes?: Maybe<RecipeCreateManyInput>;
  owner: UserCreateOneWithoutRecipeListsInput;
}

export interface RecipeCreateManyInput {
  create?: Maybe<RecipeCreateInput[] | RecipeCreateInput>;
  connect?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
}

export interface UserCreateOneWithoutRecipeListsInput {
  create?: Maybe<UserCreateWithoutRecipeListsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutRecipeListsInput {
  id?: Maybe<ID_Input>;
  password: String;
  name: String;
  email: String;
}

export interface RecipeListUpdateInput {
  name?: Maybe<String>;
  recipes?: Maybe<RecipeUpdateManyInput>;
  owner?: Maybe<UserUpdateOneRequiredWithoutRecipeListsInput>;
}

export interface RecipeUpdateManyInput {
  create?: Maybe<RecipeCreateInput[] | RecipeCreateInput>;
  update?: Maybe<
    | RecipeUpdateWithWhereUniqueNestedInput[]
    | RecipeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RecipeUpsertWithWhereUniqueNestedInput[]
    | RecipeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  connect?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  set?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  disconnect?: Maybe<RecipeWhereUniqueInput[] | RecipeWhereUniqueInput>;
  deleteMany?: Maybe<RecipeScalarWhereInput[] | RecipeScalarWhereInput>;
  updateMany?: Maybe<
    | RecipeUpdateManyWithWhereNestedInput[]
    | RecipeUpdateManyWithWhereNestedInput
  >;
}

export interface RecipeUpdateWithWhereUniqueNestedInput {
  where: RecipeWhereUniqueInput;
  data: RecipeUpdateDataInput;
}

export interface RecipeUpdateDataInput {
  label?: Maybe<String>;
  encodedUri?: Maybe<String>;
  image?: Maybe<String>;
  source?: Maybe<String>;
  sourceUrl?: Maybe<String>;
  servings?: Maybe<Int>;
  ingredients?: Maybe<Json>;
  calories?: Maybe<Float>;
  totalWeight?: Maybe<Float>;
  healthLabels?: Maybe<healthLabelUpdateManyInput>;
  dietLabels?: Maybe<dietLabelUpdateManyInput>;
}

export interface RecipeUpsertWithWhereUniqueNestedInput {
  where: RecipeWhereUniqueInput;
  update: RecipeUpdateDataInput;
  create: RecipeCreateInput;
}

export interface RecipeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  encodedUri?: Maybe<String>;
  encodedUri_not?: Maybe<String>;
  encodedUri_in?: Maybe<String[] | String>;
  encodedUri_not_in?: Maybe<String[] | String>;
  encodedUri_lt?: Maybe<String>;
  encodedUri_lte?: Maybe<String>;
  encodedUri_gt?: Maybe<String>;
  encodedUri_gte?: Maybe<String>;
  encodedUri_contains?: Maybe<String>;
  encodedUri_not_contains?: Maybe<String>;
  encodedUri_starts_with?: Maybe<String>;
  encodedUri_not_starts_with?: Maybe<String>;
  encodedUri_ends_with?: Maybe<String>;
  encodedUri_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  source?: Maybe<String>;
  source_not?: Maybe<String>;
  source_in?: Maybe<String[] | String>;
  source_not_in?: Maybe<String[] | String>;
  source_lt?: Maybe<String>;
  source_lte?: Maybe<String>;
  source_gt?: Maybe<String>;
  source_gte?: Maybe<String>;
  source_contains?: Maybe<String>;
  source_not_contains?: Maybe<String>;
  source_starts_with?: Maybe<String>;
  source_not_starts_with?: Maybe<String>;
  source_ends_with?: Maybe<String>;
  source_not_ends_with?: Maybe<String>;
  sourceUrl?: Maybe<String>;
  sourceUrl_not?: Maybe<String>;
  sourceUrl_in?: Maybe<String[] | String>;
  sourceUrl_not_in?: Maybe<String[] | String>;
  sourceUrl_lt?: Maybe<String>;
  sourceUrl_lte?: Maybe<String>;
  sourceUrl_gt?: Maybe<String>;
  sourceUrl_gte?: Maybe<String>;
  sourceUrl_contains?: Maybe<String>;
  sourceUrl_not_contains?: Maybe<String>;
  sourceUrl_starts_with?: Maybe<String>;
  sourceUrl_not_starts_with?: Maybe<String>;
  sourceUrl_ends_with?: Maybe<String>;
  sourceUrl_not_ends_with?: Maybe<String>;
  servings?: Maybe<Int>;
  servings_not?: Maybe<Int>;
  servings_in?: Maybe<Int[] | Int>;
  servings_not_in?: Maybe<Int[] | Int>;
  servings_lt?: Maybe<Int>;
  servings_lte?: Maybe<Int>;
  servings_gt?: Maybe<Int>;
  servings_gte?: Maybe<Int>;
  calories?: Maybe<Float>;
  calories_not?: Maybe<Float>;
  calories_in?: Maybe<Float[] | Float>;
  calories_not_in?: Maybe<Float[] | Float>;
  calories_lt?: Maybe<Float>;
  calories_lte?: Maybe<Float>;
  calories_gt?: Maybe<Float>;
  calories_gte?: Maybe<Float>;
  totalWeight?: Maybe<Float>;
  totalWeight_not?: Maybe<Float>;
  totalWeight_in?: Maybe<Float[] | Float>;
  totalWeight_not_in?: Maybe<Float[] | Float>;
  totalWeight_lt?: Maybe<Float>;
  totalWeight_lte?: Maybe<Float>;
  totalWeight_gt?: Maybe<Float>;
  totalWeight_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RecipeScalarWhereInput[] | RecipeScalarWhereInput>;
  OR?: Maybe<RecipeScalarWhereInput[] | RecipeScalarWhereInput>;
  NOT?: Maybe<RecipeScalarWhereInput[] | RecipeScalarWhereInput>;
}

export interface RecipeUpdateManyWithWhereNestedInput {
  where: RecipeScalarWhereInput;
  data: RecipeUpdateManyDataInput;
}

export interface RecipeUpdateManyDataInput {
  label?: Maybe<String>;
  encodedUri?: Maybe<String>;
  image?: Maybe<String>;
  source?: Maybe<String>;
  sourceUrl?: Maybe<String>;
  servings?: Maybe<Int>;
  ingredients?: Maybe<Json>;
  calories?: Maybe<Float>;
  totalWeight?: Maybe<Float>;
}

export interface UserUpdateOneRequiredWithoutRecipeListsInput {
  create?: Maybe<UserCreateWithoutRecipeListsInput>;
  update?: Maybe<UserUpdateWithoutRecipeListsDataInput>;
  upsert?: Maybe<UserUpsertWithoutRecipeListsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRecipeListsDataInput {
  password?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserUpsertWithoutRecipeListsInput {
  update: UserUpdateWithoutRecipeListsDataInput;
  create: UserCreateWithoutRecipeListsInput;
}

export interface RecipeListUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  password: String;
  name: String;
  email: String;
  recipeLists?: Maybe<RecipeListCreateManyWithoutOwnerInput>;
}

export interface RecipeListCreateManyWithoutOwnerInput {
  create?: Maybe<
    RecipeListCreateWithoutOwnerInput[] | RecipeListCreateWithoutOwnerInput
  >;
  connect?: Maybe<RecipeListWhereUniqueInput[] | RecipeListWhereUniqueInput>;
}

export interface RecipeListCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  name: String;
  recipes?: Maybe<RecipeCreateManyInput>;
}

export interface UserUpdateInput {
  password?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  recipeLists?: Maybe<RecipeListUpdateManyWithoutOwnerInput>;
}

export interface RecipeListUpdateManyWithoutOwnerInput {
  create?: Maybe<
    RecipeListCreateWithoutOwnerInput[] | RecipeListCreateWithoutOwnerInput
  >;
  delete?: Maybe<RecipeListWhereUniqueInput[] | RecipeListWhereUniqueInput>;
  connect?: Maybe<RecipeListWhereUniqueInput[] | RecipeListWhereUniqueInput>;
  set?: Maybe<RecipeListWhereUniqueInput[] | RecipeListWhereUniqueInput>;
  disconnect?: Maybe<RecipeListWhereUniqueInput[] | RecipeListWhereUniqueInput>;
  update?: Maybe<
    | RecipeListUpdateWithWhereUniqueWithoutOwnerInput[]
    | RecipeListUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | RecipeListUpsertWithWhereUniqueWithoutOwnerInput[]
    | RecipeListUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<RecipeListScalarWhereInput[] | RecipeListScalarWhereInput>;
  updateMany?: Maybe<
    | RecipeListUpdateManyWithWhereNestedInput[]
    | RecipeListUpdateManyWithWhereNestedInput
  >;
}

export interface RecipeListUpdateWithWhereUniqueWithoutOwnerInput {
  where: RecipeListWhereUniqueInput;
  data: RecipeListUpdateWithoutOwnerDataInput;
}

export interface RecipeListUpdateWithoutOwnerDataInput {
  name?: Maybe<String>;
  recipes?: Maybe<RecipeUpdateManyInput>;
}

export interface RecipeListUpsertWithWhereUniqueWithoutOwnerInput {
  where: RecipeListWhereUniqueInput;
  update: RecipeListUpdateWithoutOwnerDataInput;
  create: RecipeListCreateWithoutOwnerInput;
}

export interface RecipeListScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RecipeListScalarWhereInput[] | RecipeListScalarWhereInput>;
  OR?: Maybe<RecipeListScalarWhereInput[] | RecipeListScalarWhereInput>;
  NOT?: Maybe<RecipeListScalarWhereInput[] | RecipeListScalarWhereInput>;
}

export interface RecipeListUpdateManyWithWhereNestedInput {
  where: RecipeListScalarWhereInput;
  data: RecipeListUpdateManyDataInput;
}

export interface RecipeListUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  password?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface dietLabelUpdateInput {
  label?: Maybe<String>;
}

export interface dietLabelUpdateManyMutationInput {
  label?: Maybe<String>;
}

export interface healthLabelUpdateInput {
  label?: Maybe<String>;
}

export interface healthLabelUpdateManyMutationInput {
  label?: Maybe<String>;
}

export interface RecipeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecipeWhereInput>;
  AND?: Maybe<RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput>;
  OR?: Maybe<RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput>;
  NOT?: Maybe<RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput>;
}

export interface RecipeListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecipeListWhereInput>;
  AND?: Maybe<
    RecipeListSubscriptionWhereInput[] | RecipeListSubscriptionWhereInput
  >;
  OR?: Maybe<
    RecipeListSubscriptionWhereInput[] | RecipeListSubscriptionWhereInput
  >;
  NOT?: Maybe<
    RecipeListSubscriptionWhereInput[] | RecipeListSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface dietLabelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<dietLabelWhereInput>;
  AND?: Maybe<
    dietLabelSubscriptionWhereInput[] | dietLabelSubscriptionWhereInput
  >;
  OR?: Maybe<
    dietLabelSubscriptionWhereInput[] | dietLabelSubscriptionWhereInput
  >;
  NOT?: Maybe<
    dietLabelSubscriptionWhereInput[] | dietLabelSubscriptionWhereInput
  >;
}

export interface healthLabelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<healthLabelWhereInput>;
  AND?: Maybe<
    healthLabelSubscriptionWhereInput[] | healthLabelSubscriptionWhereInput
  >;
  OR?: Maybe<
    healthLabelSubscriptionWhereInput[] | healthLabelSubscriptionWhereInput
  >;
  NOT?: Maybe<
    healthLabelSubscriptionWhereInput[] | healthLabelSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Recipe {
  id: ID_Output;
  label: String;
  encodedUri: String;
  image: String;
  source: String;
  sourceUrl: String;
  servings: Int;
  ingredients: Json;
  calories: Float;
  totalWeight: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RecipePromise extends Promise<Recipe>, Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  encodedUri: () => Promise<String>;
  image: () => Promise<String>;
  source: () => Promise<String>;
  sourceUrl: () => Promise<String>;
  servings: () => Promise<Int>;
  ingredients: () => Promise<Json>;
  calories: () => Promise<Float>;
  totalWeight: () => Promise<Float>;
  healthLabels: <T = FragmentableArray<healthLabel>>(args?: {
    where?: healthLabelWhereInput;
    orderBy?: healthLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dietLabels: <T = FragmentableArray<dietLabel>>(args?: {
    where?: dietLabelWhereInput;
    orderBy?: dietLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RecipeSubscription
  extends Promise<AsyncIterator<Recipe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  encodedUri: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  sourceUrl: () => Promise<AsyncIterator<String>>;
  servings: () => Promise<AsyncIterator<Int>>;
  ingredients: () => Promise<AsyncIterator<Json>>;
  calories: () => Promise<AsyncIterator<Float>>;
  totalWeight: () => Promise<AsyncIterator<Float>>;
  healthLabels: <T = Promise<AsyncIterator<healthLabelSubscription>>>(args?: {
    where?: healthLabelWhereInput;
    orderBy?: healthLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dietLabels: <T = Promise<AsyncIterator<dietLabelSubscription>>>(args?: {
    where?: dietLabelWhereInput;
    orderBy?: dietLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RecipeNullablePromise
  extends Promise<Recipe | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  encodedUri: () => Promise<String>;
  image: () => Promise<String>;
  source: () => Promise<String>;
  sourceUrl: () => Promise<String>;
  servings: () => Promise<Int>;
  ingredients: () => Promise<Json>;
  calories: () => Promise<Float>;
  totalWeight: () => Promise<Float>;
  healthLabels: <T = FragmentableArray<healthLabel>>(args?: {
    where?: healthLabelWhereInput;
    orderBy?: healthLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dietLabels: <T = FragmentableArray<dietLabel>>(args?: {
    where?: dietLabelWhereInput;
    orderBy?: dietLabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface healthLabel {
  id: ID_Output;
  label: String;
}

export interface healthLabelPromise extends Promise<healthLabel>, Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
}

export interface healthLabelSubscription
  extends Promise<AsyncIterator<healthLabel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
}

export interface healthLabelNullablePromise
  extends Promise<healthLabel | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
}

export interface dietLabel {
  id: ID_Output;
  label: String;
}

export interface dietLabelPromise extends Promise<dietLabel>, Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
}

export interface dietLabelSubscription
  extends Promise<AsyncIterator<dietLabel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
}

export interface dietLabelNullablePromise
  extends Promise<dietLabel | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
}

export interface RecipeConnection {
  pageInfo: PageInfo;
  edges: RecipeEdge[];
}

export interface RecipeConnectionPromise
  extends Promise<RecipeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecipeEdge>>() => T;
  aggregate: <T = AggregateRecipePromise>() => T;
}

export interface RecipeConnectionSubscription
  extends Promise<AsyncIterator<RecipeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecipeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecipeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RecipeEdge {
  node: Recipe;
  cursor: String;
}

export interface RecipeEdgePromise extends Promise<RecipeEdge>, Fragmentable {
  node: <T = RecipePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecipeEdgeSubscription
  extends Promise<AsyncIterator<RecipeEdge>>,
    Fragmentable {
  node: <T = RecipeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecipe {
  count: Int;
}

export interface AggregateRecipePromise
  extends Promise<AggregateRecipe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecipeSubscription
  extends Promise<AsyncIterator<AggregateRecipe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RecipeList {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RecipeListPromise extends Promise<RecipeList>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  recipes: <T = FragmentableArray<Recipe>>(args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RecipeListSubscription
  extends Promise<AsyncIterator<RecipeList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  recipes: <T = Promise<AsyncIterator<RecipeSubscription>>>(args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  owner: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RecipeListNullablePromise
  extends Promise<RecipeList | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  recipes: <T = FragmentableArray<Recipe>>(args?: {
    where?: RecipeWhereInput;
    orderBy?: RecipeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  password: String;
  name: String;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  recipeLists: <T = FragmentableArray<RecipeList>>(args?: {
    where?: RecipeListWhereInput;
    orderBy?: RecipeListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  recipeLists: <T = Promise<AsyncIterator<RecipeListSubscription>>>(args?: {
    where?: RecipeListWhereInput;
    orderBy?: RecipeListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  recipeLists: <T = FragmentableArray<RecipeList>>(args?: {
    where?: RecipeListWhereInput;
    orderBy?: RecipeListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RecipeListConnection {
  pageInfo: PageInfo;
  edges: RecipeListEdge[];
}

export interface RecipeListConnectionPromise
  extends Promise<RecipeListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecipeListEdge>>() => T;
  aggregate: <T = AggregateRecipeListPromise>() => T;
}

export interface RecipeListConnectionSubscription
  extends Promise<AsyncIterator<RecipeListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecipeListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecipeListSubscription>() => T;
}

export interface RecipeListEdge {
  node: RecipeList;
  cursor: String;
}

export interface RecipeListEdgePromise
  extends Promise<RecipeListEdge>,
    Fragmentable {
  node: <T = RecipeListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecipeListEdgeSubscription
  extends Promise<AsyncIterator<RecipeListEdge>>,
    Fragmentable {
  node: <T = RecipeListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecipeList {
  count: Int;
}

export interface AggregateRecipeListPromise
  extends Promise<AggregateRecipeList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecipeListSubscription
  extends Promise<AsyncIterator<AggregateRecipeList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface dietLabelConnection {
  pageInfo: PageInfo;
  edges: dietLabelEdge[];
}

export interface dietLabelConnectionPromise
  extends Promise<dietLabelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<dietLabelEdge>>() => T;
  aggregate: <T = AggregatedietLabelPromise>() => T;
}

export interface dietLabelConnectionSubscription
  extends Promise<AsyncIterator<dietLabelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<dietLabelEdgeSubscription>>>() => T;
  aggregate: <T = AggregatedietLabelSubscription>() => T;
}

export interface dietLabelEdge {
  node: dietLabel;
  cursor: String;
}

export interface dietLabelEdgePromise
  extends Promise<dietLabelEdge>,
    Fragmentable {
  node: <T = dietLabelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface dietLabelEdgeSubscription
  extends Promise<AsyncIterator<dietLabelEdge>>,
    Fragmentable {
  node: <T = dietLabelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatedietLabel {
  count: Int;
}

export interface AggregatedietLabelPromise
  extends Promise<AggregatedietLabel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatedietLabelSubscription
  extends Promise<AsyncIterator<AggregatedietLabel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface healthLabelConnection {
  pageInfo: PageInfo;
  edges: healthLabelEdge[];
}

export interface healthLabelConnectionPromise
  extends Promise<healthLabelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<healthLabelEdge>>() => T;
  aggregate: <T = AggregatehealthLabelPromise>() => T;
}

export interface healthLabelConnectionSubscription
  extends Promise<AsyncIterator<healthLabelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<healthLabelEdgeSubscription>>>() => T;
  aggregate: <T = AggregatehealthLabelSubscription>() => T;
}

export interface healthLabelEdge {
  node: healthLabel;
  cursor: String;
}

export interface healthLabelEdgePromise
  extends Promise<healthLabelEdge>,
    Fragmentable {
  node: <T = healthLabelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface healthLabelEdgeSubscription
  extends Promise<AsyncIterator<healthLabelEdge>>,
    Fragmentable {
  node: <T = healthLabelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatehealthLabel {
  count: Int;
}

export interface AggregatehealthLabelPromise
  extends Promise<AggregatehealthLabel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatehealthLabelSubscription
  extends Promise<AsyncIterator<AggregatehealthLabel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface RecipeSubscriptionPayload {
  mutation: MutationType;
  node: Recipe;
  updatedFields: String[];
  previousValues: RecipePreviousValues;
}

export interface RecipeSubscriptionPayloadPromise
  extends Promise<RecipeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecipePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecipePreviousValuesPromise>() => T;
}

export interface RecipeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecipeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecipeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecipePreviousValuesSubscription>() => T;
}

export interface RecipePreviousValues {
  id: ID_Output;
  label: String;
  encodedUri: String;
  image: String;
  source: String;
  sourceUrl: String;
  servings: Int;
  ingredients: Json;
  calories: Float;
  totalWeight: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RecipePreviousValuesPromise
  extends Promise<RecipePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  encodedUri: () => Promise<String>;
  image: () => Promise<String>;
  source: () => Promise<String>;
  sourceUrl: () => Promise<String>;
  servings: () => Promise<Int>;
  ingredients: () => Promise<Json>;
  calories: () => Promise<Float>;
  totalWeight: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RecipePreviousValuesSubscription
  extends Promise<AsyncIterator<RecipePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  encodedUri: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  sourceUrl: () => Promise<AsyncIterator<String>>;
  servings: () => Promise<AsyncIterator<Int>>;
  ingredients: () => Promise<AsyncIterator<Json>>;
  calories: () => Promise<AsyncIterator<Float>>;
  totalWeight: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RecipeListSubscriptionPayload {
  mutation: MutationType;
  node: RecipeList;
  updatedFields: String[];
  previousValues: RecipeListPreviousValues;
}

export interface RecipeListSubscriptionPayloadPromise
  extends Promise<RecipeListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecipeListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecipeListPreviousValuesPromise>() => T;
}

export interface RecipeListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecipeListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecipeListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecipeListPreviousValuesSubscription>() => T;
}

export interface RecipeListPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RecipeListPreviousValuesPromise
  extends Promise<RecipeListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RecipeListPreviousValuesSubscription
  extends Promise<AsyncIterator<RecipeListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  password: String;
  name: String;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface dietLabelSubscriptionPayload {
  mutation: MutationType;
  node: dietLabel;
  updatedFields: String[];
  previousValues: dietLabelPreviousValues;
}

export interface dietLabelSubscriptionPayloadPromise
  extends Promise<dietLabelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = dietLabelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = dietLabelPreviousValuesPromise>() => T;
}

export interface dietLabelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<dietLabelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = dietLabelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = dietLabelPreviousValuesSubscription>() => T;
}

export interface dietLabelPreviousValues {
  id: ID_Output;
  label: String;
}

export interface dietLabelPreviousValuesPromise
  extends Promise<dietLabelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
}

export interface dietLabelPreviousValuesSubscription
  extends Promise<AsyncIterator<dietLabelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
}

export interface healthLabelSubscriptionPayload {
  mutation: MutationType;
  node: healthLabel;
  updatedFields: String[];
  previousValues: healthLabelPreviousValues;
}

export interface healthLabelSubscriptionPayloadPromise
  extends Promise<healthLabelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = healthLabelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = healthLabelPreviousValuesPromise>() => T;
}

export interface healthLabelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<healthLabelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = healthLabelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = healthLabelPreviousValuesSubscription>() => T;
}

export interface healthLabelPreviousValues {
  id: ID_Output;
  label: String;
}

export interface healthLabelPreviousValuesPromise
  extends Promise<healthLabelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
}

export interface healthLabelPreviousValuesSubscription
  extends Promise<AsyncIterator<healthLabelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Json = any;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Recipe",
    embedded: false
  },
  {
    name: "RecipeList",
    embedded: false
  },
  {
    name: "healthLabel",
    embedded: false
  },
  {
    name: "dietLabel",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
