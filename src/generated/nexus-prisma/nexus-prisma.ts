/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      RecipeList: RecipeListObject
      Recipe: RecipeObject
      healthLabel: healthLabelObject
      dietLabel: dietLabelObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      RecipeConnection: RecipeConnectionObject
      RecipeEdge: RecipeEdgeObject
      AggregateRecipe: AggregateRecipeObject
      RecipeListConnection: RecipeListConnectionObject
      RecipeListEdge: RecipeListEdgeObject
      AggregateRecipeList: AggregateRecipeListObject
      healthLabelConnection: healthLabelConnectionObject
      healthLabelEdge: healthLabelEdgeObject
      AggregatehealthLabel: AggregatehealthLabelObject
      dietLabelConnection: dietLabelConnectionObject
      dietLabelEdge: dietLabelEdgeObject
      AggregatedietLabel: AggregatedietLabelObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      RecipeSubscriptionPayload: RecipeSubscriptionPayloadObject
      RecipePreviousValues: RecipePreviousValuesObject
      RecipeListSubscriptionPayload: RecipeListSubscriptionPayloadObject
      RecipeListPreviousValues: RecipeListPreviousValuesObject
      healthLabelSubscriptionPayload: healthLabelSubscriptionPayloadObject
      healthLabelPreviousValues: healthLabelPreviousValuesObject
      dietLabelSubscriptionPayload: dietLabelSubscriptionPayloadObject
      dietLabelPreviousValues: dietLabelPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      RecipeList: RecipeListFieldDetails
      Recipe: RecipeFieldDetails
      healthLabel: healthLabelFieldDetails
      dietLabel: dietLabelFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      RecipeConnection: RecipeConnectionFieldDetails
      RecipeEdge: RecipeEdgeFieldDetails
      AggregateRecipe: AggregateRecipeFieldDetails
      RecipeListConnection: RecipeListConnectionFieldDetails
      RecipeListEdge: RecipeListEdgeFieldDetails
      AggregateRecipeList: AggregateRecipeListFieldDetails
      healthLabelConnection: healthLabelConnectionFieldDetails
      healthLabelEdge: healthLabelEdgeFieldDetails
      AggregatehealthLabel: AggregatehealthLabelFieldDetails
      dietLabelConnection: dietLabelConnectionFieldDetails
      dietLabelEdge: dietLabelEdgeFieldDetails
      AggregatedietLabel: AggregatedietLabelFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      RecipeSubscriptionPayload: RecipeSubscriptionPayloadFieldDetails
      RecipePreviousValues: RecipePreviousValuesFieldDetails
      RecipeListSubscriptionPayload: RecipeListSubscriptionPayloadFieldDetails
      RecipeListPreviousValues: RecipeListPreviousValuesFieldDetails
      healthLabelSubscriptionPayload: healthLabelSubscriptionPayloadFieldDetails
      healthLabelPreviousValues: healthLabelPreviousValuesFieldDetails
      dietLabelSubscriptionPayload: dietLabelSubscriptionPayloadFieldDetails
      dietLabelPreviousValues: dietLabelPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      RecipeListWhereInput: RecipeListWhereInputInputObject
      RecipeWhereInput: RecipeWhereInputInputObject
      healthLabelWhereInput: healthLabelWhereInputInputObject
      dietLabelWhereInput: dietLabelWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      RecipeWhereUniqueInput: RecipeWhereUniqueInputInputObject
      RecipeListWhereUniqueInput: RecipeListWhereUniqueInputInputObject
      healthLabelWhereUniqueInput: healthLabelWhereUniqueInputInputObject
      dietLabelWhereUniqueInput: dietLabelWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      RecipeListCreateManyWithoutUserInput: RecipeListCreateManyWithoutUserInputInputObject
      RecipeListCreateWithoutUserInput: RecipeListCreateWithoutUserInputInputObject
      RecipeCreateManyInput: RecipeCreateManyInputInputObject
      RecipeCreateInput: RecipeCreateInputInputObject
      healthLabelCreateManyInput: healthLabelCreateManyInputInputObject
      healthLabelCreateInput: healthLabelCreateInputInputObject
      dietLabelCreateManyInput: dietLabelCreateManyInputInputObject
      dietLabelCreateInput: dietLabelCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      RecipeListUpdateManyWithoutUserInput: RecipeListUpdateManyWithoutUserInputInputObject
      RecipeListUpdateWithWhereUniqueWithoutUserInput: RecipeListUpdateWithWhereUniqueWithoutUserInputInputObject
      RecipeListUpdateWithoutUserDataInput: RecipeListUpdateWithoutUserDataInputInputObject
      RecipeUpdateManyInput: RecipeUpdateManyInputInputObject
      RecipeUpdateWithWhereUniqueNestedInput: RecipeUpdateWithWhereUniqueNestedInputInputObject
      RecipeUpdateDataInput: RecipeUpdateDataInputInputObject
      healthLabelUpdateManyInput: healthLabelUpdateManyInputInputObject
      healthLabelUpdateWithWhereUniqueNestedInput: healthLabelUpdateWithWhereUniqueNestedInputInputObject
      healthLabelUpdateDataInput: healthLabelUpdateDataInputInputObject
      healthLabelUpsertWithWhereUniqueNestedInput: healthLabelUpsertWithWhereUniqueNestedInputInputObject
      healthLabelScalarWhereInput: healthLabelScalarWhereInputInputObject
      healthLabelUpdateManyWithWhereNestedInput: healthLabelUpdateManyWithWhereNestedInputInputObject
      healthLabelUpdateManyDataInput: healthLabelUpdateManyDataInputInputObject
      dietLabelUpdateManyInput: dietLabelUpdateManyInputInputObject
      dietLabelUpdateWithWhereUniqueNestedInput: dietLabelUpdateWithWhereUniqueNestedInputInputObject
      dietLabelUpdateDataInput: dietLabelUpdateDataInputInputObject
      dietLabelUpsertWithWhereUniqueNestedInput: dietLabelUpsertWithWhereUniqueNestedInputInputObject
      dietLabelScalarWhereInput: dietLabelScalarWhereInputInputObject
      dietLabelUpdateManyWithWhereNestedInput: dietLabelUpdateManyWithWhereNestedInputInputObject
      dietLabelUpdateManyDataInput: dietLabelUpdateManyDataInputInputObject
      RecipeUpsertWithWhereUniqueNestedInput: RecipeUpsertWithWhereUniqueNestedInputInputObject
      RecipeScalarWhereInput: RecipeScalarWhereInputInputObject
      RecipeUpdateManyWithWhereNestedInput: RecipeUpdateManyWithWhereNestedInputInputObject
      RecipeUpdateManyDataInput: RecipeUpdateManyDataInputInputObject
      RecipeListUpsertWithWhereUniqueWithoutUserInput: RecipeListUpsertWithWhereUniqueWithoutUserInputInputObject
      RecipeListScalarWhereInput: RecipeListScalarWhereInputInputObject
      RecipeListUpdateManyWithWhereNestedInput: RecipeListUpdateManyWithWhereNestedInputInputObject
      RecipeListUpdateManyDataInput: RecipeListUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      RecipeUpdateInput: RecipeUpdateInputInputObject
      RecipeUpdateManyMutationInput: RecipeUpdateManyMutationInputInputObject
      RecipeListCreateInput: RecipeListCreateInputInputObject
      UserCreateOneWithoutRecipeListsInput: UserCreateOneWithoutRecipeListsInputInputObject
      UserCreateWithoutRecipeListsInput: UserCreateWithoutRecipeListsInputInputObject
      RecipeListUpdateInput: RecipeListUpdateInputInputObject
      UserUpdateOneRequiredWithoutRecipeListsInput: UserUpdateOneRequiredWithoutRecipeListsInputInputObject
      UserUpdateWithoutRecipeListsDataInput: UserUpdateWithoutRecipeListsDataInputInputObject
      UserUpsertWithoutRecipeListsInput: UserUpsertWithoutRecipeListsInputInputObject
      RecipeListUpdateManyMutationInput: RecipeListUpdateManyMutationInputInputObject
      healthLabelUpdateInput: healthLabelUpdateInputInputObject
      healthLabelUpdateManyMutationInput: healthLabelUpdateManyMutationInputInputObject
      dietLabelUpdateInput: dietLabelUpdateInputInputObject
      dietLabelUpdateManyMutationInput: dietLabelUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      RecipeSubscriptionWhereInput: RecipeSubscriptionWhereInputInputObject
      RecipeListSubscriptionWhereInput: RecipeListSubscriptionWhereInputInputObject
      healthLabelSubscriptionWhereInput: healthLabelSubscriptionWhereInputInputObject
      dietLabelSubscriptionWhereInput: dietLabelSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    RecipeListOrderByInput: RecipeListOrderByInputValues,
    RecipeOrderByInput: RecipeOrderByInputValues,
    healthLabelOrderByInput: healthLabelOrderByInputValues,
    dietLabelOrderByInput: dietLabelOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'recipe', args?: QueryRecipeArgs[] | false, alias?: string  } 
  | { name: 'recipes', args?: QueryRecipesArgs[] | false, alias?: string  } 
  | { name: 'recipesConnection', args?: QueryRecipesConnectionArgs[] | false, alias?: string  } 
  | { name: 'recipeList', args?: QueryRecipeListArgs[] | false, alias?: string  } 
  | { name: 'recipeLists', args?: QueryRecipeListsArgs[] | false, alias?: string  } 
  | { name: 'recipeListsConnection', args?: QueryRecipeListsConnectionArgs[] | false, alias?: string  } 
  | { name: 'healthLabel', args?: QueryHealthLabelArgs[] | false, alias?: string  } 
  | { name: 'healthLabels', args?: QueryHealthLabelsArgs[] | false, alias?: string  } 
  | { name: 'healthLabelsConnection', args?: QueryHealthLabelsConnectionArgs[] | false, alias?: string  } 
  | { name: 'dietLabel', args?: QueryDietLabelArgs[] | false, alias?: string  } 
  | { name: 'dietLabels', args?: QueryDietLabelsArgs[] | false, alias?: string  } 
  | { name: 'dietLabelsConnection', args?: QueryDietLabelsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'recipe'
  | 'recipes'
  | 'recipesConnection'
  | 'recipeList'
  | 'recipeLists'
  | 'recipeListsConnection'
  | 'healthLabel'
  | 'healthLabels'
  | 'healthLabelsConnection'
  | 'dietLabel'
  | 'dietLabels'
  | 'dietLabelsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRecipeArgs =
  | 'where'
type QueryRecipesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRecipesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRecipeListArgs =
  | 'where'
type QueryRecipeListsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRecipeListsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHealthLabelArgs =
  | 'where'
type QueryHealthLabelsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHealthLabelsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDietLabelArgs =
  | 'where'
type QueryDietLabelsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDietLabelsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  recipe: {
    type: 'Recipe'
    args: Record<QueryRecipeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RecipeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Recipe | null> | prisma.Recipe | null
  }
  recipes: {
    type: 'Recipe'
    args: Record<QueryRecipesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RecipeWhereInput | null, orderBy?: prisma.RecipeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Recipe[]> | prisma.Recipe[]
  }
  recipesConnection: {
    type: 'RecipeConnection'
    args: Record<QueryRecipesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RecipeWhereInput | null, orderBy?: prisma.RecipeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeConnection> | prisma.RecipeConnection
  }
  recipeList: {
    type: 'RecipeList'
    args: Record<QueryRecipeListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RecipeListWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeList | null> | prisma.RecipeList | null
  }
  recipeLists: {
    type: 'RecipeList'
    args: Record<QueryRecipeListsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RecipeListWhereInput | null, orderBy?: prisma.RecipeListOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeList[]> | prisma.RecipeList[]
  }
  recipeListsConnection: {
    type: 'RecipeListConnection'
    args: Record<QueryRecipeListsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RecipeListWhereInput | null, orderBy?: prisma.RecipeListOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeListConnection> | prisma.RecipeListConnection
  }
  healthLabel: {
    type: 'healthLabel'
    args: Record<QueryHealthLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: healthLabelWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabel | null> | prisma.healthLabel | null
  }
  healthLabels: {
    type: 'healthLabel'
    args: Record<QueryHealthLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: healthLabelWhereInput | null, orderBy?: prisma.healthLabelOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabel[]> | prisma.healthLabel[]
  }
  healthLabelsConnection: {
    type: 'healthLabelConnection'
    args: Record<QueryHealthLabelsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: healthLabelWhereInput | null, orderBy?: prisma.healthLabelOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabelConnection> | prisma.healthLabelConnection
  }
  dietLabel: {
    type: 'dietLabel'
    args: Record<QueryDietLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: dietLabelWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabel | null> | prisma.dietLabel | null
  }
  dietLabels: {
    type: 'dietLabel'
    args: Record<QueryDietLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: dietLabelWhereInput | null, orderBy?: prisma.dietLabelOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabel[]> | prisma.dietLabel[]
  }
  dietLabelsConnection: {
    type: 'dietLabelConnection'
    args: Record<QueryDietLabelsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: dietLabelWhereInput | null, orderBy?: prisma.dietLabelOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabelConnection> | prisma.dietLabelConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'recipeLists', args?: UserRecipeListsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'password'
  | 'name'
  | 'email'
  | 'recipeLists'
  | 'createdAt'
  | 'updatedAt'


type UserRecipeListsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  recipeLists: {
    type: 'RecipeList'
    args: Record<UserRecipeListsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: RecipeListWhereInput | null, orderBy?: prisma.RecipeListOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeList[]> | prisma.RecipeList[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RecipeList

type RecipeListObject =
  | RecipeListFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'recipes', args?: RecipeListRecipesArgs[] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type RecipeListFields =
  | 'id'
  | 'name'
  | 'recipes'
  | 'user'
  | 'createdAt'
  | 'updatedAt'


type RecipeListRecipesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface RecipeListFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  recipes: {
    type: 'Recipe'
    args: Record<RecipeListRecipesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeList">,
      args: { where?: RecipeWhereInput | null, orderBy?: prisma.RecipeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Recipe[]> | prisma.Recipe[]
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeList">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Recipe

type RecipeObject =
  | RecipeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'label', args?: [] | false, alias?: string  } 
  | { name: 'uri', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'servings', args?: [] | false, alias?: string  } 
  | { name: 'calories', args?: [] | false, alias?: string  } 
  | { name: 'totalWeight', args?: [] | false, alias?: string  } 
  | { name: 'healthLabels', args?: RecipeHealthLabelsArgs[] | false, alias?: string  } 
  | { name: 'dietLabels', args?: RecipeDietLabelsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type RecipeFields =
  | 'id'
  | 'label'
  | 'uri'
  | 'image'
  | 'servings'
  | 'calories'
  | 'totalWeight'
  | 'healthLabels'
  | 'dietLabels'
  | 'createdAt'
  | 'updatedAt'


type RecipeHealthLabelsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type RecipeDietLabelsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface RecipeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  label: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  uri: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  servings: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  calories: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  totalWeight: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  healthLabels: {
    type: 'healthLabel'
    args: Record<RecipeHealthLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Recipe">,
      args: { where?: healthLabelWhereInput | null, orderBy?: prisma.healthLabelOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabel[]> | prisma.healthLabel[]
  }
  dietLabels: {
    type: 'dietLabel'
    args: Record<RecipeDietLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Recipe">,
      args: { where?: dietLabelWhereInput | null, orderBy?: prisma.dietLabelOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabel[]> | prisma.dietLabel[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for healthLabel

type healthLabelObject =
  | healthLabelFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'label', args?: [] | false, alias?: string  } 

type healthLabelFields =
  | 'id'
  | 'label'



  

export interface healthLabelFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  label: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for dietLabel

type dietLabelObject =
  | dietLabelFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'label', args?: [] | false, alias?: string  } 

type dietLabelFields =
  | 'id'
  | 'label'



  

export interface dietLabelFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  label: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RecipeConnection

type RecipeConnectionObject =
  | RecipeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RecipeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RecipeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RecipeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeEdge[]> | prisma.RecipeEdge[]
  }
  aggregate: {
    type: 'AggregateRecipe'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRecipe> | prisma.AggregateRecipe
  }
}
  

// Types for RecipeEdge

type RecipeEdgeObject =
  | RecipeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RecipeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RecipeEdgeFieldDetails {
  node: {
    type: 'Recipe'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Recipe> | prisma.Recipe
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRecipe

type AggregateRecipeObject =
  | AggregateRecipeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRecipeFields =
  | 'count'



  

export interface AggregateRecipeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RecipeListConnection

type RecipeListConnectionObject =
  | RecipeListConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RecipeListConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RecipeListConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeListConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RecipeListEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeListConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeListEdge[]> | prisma.RecipeListEdge[]
  }
  aggregate: {
    type: 'AggregateRecipeList'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeListConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRecipeList> | prisma.AggregateRecipeList
  }
}
  

// Types for RecipeListEdge

type RecipeListEdgeObject =
  | RecipeListEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RecipeListEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RecipeListEdgeFieldDetails {
  node: {
    type: 'RecipeList'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeListEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeList> | prisma.RecipeList
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRecipeList

type AggregateRecipeListObject =
  | AggregateRecipeListFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRecipeListFields =
  | 'count'



  

export interface AggregateRecipeListFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for healthLabelConnection

type healthLabelConnectionObject =
  | healthLabelConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type healthLabelConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface healthLabelConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"healthLabelConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'healthLabelEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"healthLabelConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabelEdge[]> | prisma.healthLabelEdge[]
  }
  aggregate: {
    type: 'AggregatehealthLabel'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"healthLabelConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatehealthLabel> | prisma.AggregatehealthLabel
  }
}
  

// Types for healthLabelEdge

type healthLabelEdgeObject =
  | healthLabelEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type healthLabelEdgeFields =
  | 'node'
  | 'cursor'



  

export interface healthLabelEdgeFieldDetails {
  node: {
    type: 'healthLabel'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"healthLabelEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabel> | prisma.healthLabel
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatehealthLabel

type AggregatehealthLabelObject =
  | AggregatehealthLabelFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatehealthLabelFields =
  | 'count'



  

export interface AggregatehealthLabelFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for dietLabelConnection

type dietLabelConnectionObject =
  | dietLabelConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type dietLabelConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface dietLabelConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"dietLabelConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'dietLabelEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"dietLabelConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabelEdge[]> | prisma.dietLabelEdge[]
  }
  aggregate: {
    type: 'AggregatedietLabel'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"dietLabelConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatedietLabel> | prisma.AggregatedietLabel
  }
}
  

// Types for dietLabelEdge

type dietLabelEdgeObject =
  | dietLabelEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type dietLabelEdgeFields =
  | 'node'
  | 'cursor'



  

export interface dietLabelEdgeFieldDetails {
  node: {
    type: 'dietLabel'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"dietLabelEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabel> | prisma.dietLabel
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatedietLabel

type AggregatedietLabelObject =
  | AggregatedietLabelFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatedietLabelFields =
  | 'count'



  

export interface AggregatedietLabelFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createRecipe', args?: MutationCreateRecipeArgs[] | false, alias?: string  } 
  | { name: 'updateRecipe', args?: MutationUpdateRecipeArgs[] | false, alias?: string  } 
  | { name: 'updateManyRecipes', args?: MutationUpdateManyRecipesArgs[] | false, alias?: string  } 
  | { name: 'upsertRecipe', args?: MutationUpsertRecipeArgs[] | false, alias?: string  } 
  | { name: 'deleteRecipe', args?: MutationDeleteRecipeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRecipes', args?: MutationDeleteManyRecipesArgs[] | false, alias?: string  } 
  | { name: 'createRecipeList', args?: MutationCreateRecipeListArgs[] | false, alias?: string  } 
  | { name: 'updateRecipeList', args?: MutationUpdateRecipeListArgs[] | false, alias?: string  } 
  | { name: 'updateManyRecipeLists', args?: MutationUpdateManyRecipeListsArgs[] | false, alias?: string  } 
  | { name: 'upsertRecipeList', args?: MutationUpsertRecipeListArgs[] | false, alias?: string  } 
  | { name: 'deleteRecipeList', args?: MutationDeleteRecipeListArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRecipeLists', args?: MutationDeleteManyRecipeListsArgs[] | false, alias?: string  } 
  | { name: 'createhealthLabel', args?: MutationCreatehealthLabelArgs[] | false, alias?: string  } 
  | { name: 'updatehealthLabel', args?: MutationUpdatehealthLabelArgs[] | false, alias?: string  } 
  | { name: 'updateManyhealthLabels', args?: MutationUpdateManyhealthLabelsArgs[] | false, alias?: string  } 
  | { name: 'upserthealthLabel', args?: MutationUpserthealthLabelArgs[] | false, alias?: string  } 
  | { name: 'deletehealthLabel', args?: MutationDeletehealthLabelArgs[] | false, alias?: string  } 
  | { name: 'deleteManyhealthLabels', args?: MutationDeleteManyhealthLabelsArgs[] | false, alias?: string  } 
  | { name: 'createdietLabel', args?: MutationCreatedietLabelArgs[] | false, alias?: string  } 
  | { name: 'updatedietLabel', args?: MutationUpdatedietLabelArgs[] | false, alias?: string  } 
  | { name: 'updateManydietLabels', args?: MutationUpdateManydietLabelsArgs[] | false, alias?: string  } 
  | { name: 'upsertdietLabel', args?: MutationUpsertdietLabelArgs[] | false, alias?: string  } 
  | { name: 'deletedietLabel', args?: MutationDeletedietLabelArgs[] | false, alias?: string  } 
  | { name: 'deleteManydietLabels', args?: MutationDeleteManydietLabelsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createRecipe'
  | 'updateRecipe'
  | 'updateManyRecipes'
  | 'upsertRecipe'
  | 'deleteRecipe'
  | 'deleteManyRecipes'
  | 'createRecipeList'
  | 'updateRecipeList'
  | 'updateManyRecipeLists'
  | 'upsertRecipeList'
  | 'deleteRecipeList'
  | 'deleteManyRecipeLists'
  | 'createhealthLabel'
  | 'updatehealthLabel'
  | 'updateManyhealthLabels'
  | 'upserthealthLabel'
  | 'deletehealthLabel'
  | 'deleteManyhealthLabels'
  | 'createdietLabel'
  | 'updatedietLabel'
  | 'updateManydietLabels'
  | 'upsertdietLabel'
  | 'deletedietLabel'
  | 'deleteManydietLabels'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateRecipeArgs =
  | 'data'
type MutationUpdateRecipeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRecipesArgs =
  | 'data'
  | 'where'
type MutationUpsertRecipeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRecipeArgs =
  | 'where'
type MutationDeleteManyRecipesArgs =
  | 'where'
type MutationCreateRecipeListArgs =
  | 'data'
type MutationUpdateRecipeListArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRecipeListsArgs =
  | 'data'
  | 'where'
type MutationUpsertRecipeListArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRecipeListArgs =
  | 'where'
type MutationDeleteManyRecipeListsArgs =
  | 'where'
type MutationCreatehealthLabelArgs =
  | 'data'
type MutationUpdatehealthLabelArgs =
  | 'data'
  | 'where'
type MutationUpdateManyhealthLabelsArgs =
  | 'data'
  | 'where'
type MutationUpserthealthLabelArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletehealthLabelArgs =
  | 'where'
type MutationDeleteManyhealthLabelsArgs =
  | 'where'
type MutationCreatedietLabelArgs =
  | 'data'
type MutationUpdatedietLabelArgs =
  | 'data'
  | 'where'
type MutationUpdateManydietLabelsArgs =
  | 'data'
  | 'where'
type MutationUpsertdietLabelArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletedietLabelArgs =
  | 'where'
type MutationDeleteManydietLabelsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRecipe: {
    type: 'Recipe'
    args: Record<MutationCreateRecipeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RecipeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Recipe> | prisma.Recipe
  }
  updateRecipe: {
    type: 'Recipe'
    args: Record<MutationUpdateRecipeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RecipeUpdateInput, where: RecipeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Recipe | null> | prisma.Recipe | null
  }
  updateManyRecipes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRecipesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RecipeUpdateManyMutationInput, where?: RecipeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRecipe: {
    type: 'Recipe'
    args: Record<MutationUpsertRecipeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RecipeWhereUniqueInput, create: RecipeCreateInput, update: RecipeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Recipe> | prisma.Recipe
  }
  deleteRecipe: {
    type: 'Recipe'
    args: Record<MutationDeleteRecipeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RecipeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Recipe | null> | prisma.Recipe | null
  }
  deleteManyRecipes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRecipesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RecipeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRecipeList: {
    type: 'RecipeList'
    args: Record<MutationCreateRecipeListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RecipeListCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeList> | prisma.RecipeList
  }
  updateRecipeList: {
    type: 'RecipeList'
    args: Record<MutationUpdateRecipeListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RecipeListUpdateInput, where: RecipeListWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeList | null> | prisma.RecipeList | null
  }
  updateManyRecipeLists: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRecipeListsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RecipeListUpdateManyMutationInput, where?: RecipeListWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRecipeList: {
    type: 'RecipeList'
    args: Record<MutationUpsertRecipeListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RecipeListWhereUniqueInput, create: RecipeListCreateInput, update: RecipeListUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeList> | prisma.RecipeList
  }
  deleteRecipeList: {
    type: 'RecipeList'
    args: Record<MutationDeleteRecipeListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RecipeListWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeList | null> | prisma.RecipeList | null
  }
  deleteManyRecipeLists: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRecipeListsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RecipeListWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createhealthLabel: {
    type: 'healthLabel'
    args: Record<MutationCreatehealthLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: healthLabelCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabel> | prisma.healthLabel
  }
  updatehealthLabel: {
    type: 'healthLabel'
    args: Record<MutationUpdatehealthLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: healthLabelUpdateInput, where: healthLabelWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabel | null> | prisma.healthLabel | null
  }
  updateManyhealthLabels: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyhealthLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: healthLabelUpdateManyMutationInput, where?: healthLabelWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upserthealthLabel: {
    type: 'healthLabel'
    args: Record<MutationUpserthealthLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: healthLabelWhereUniqueInput, create: healthLabelCreateInput, update: healthLabelUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabel> | prisma.healthLabel
  }
  deletehealthLabel: {
    type: 'healthLabel'
    args: Record<MutationDeletehealthLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: healthLabelWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabel | null> | prisma.healthLabel | null
  }
  deleteManyhealthLabels: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyhealthLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: healthLabelWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createdietLabel: {
    type: 'dietLabel'
    args: Record<MutationCreatedietLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: dietLabelCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabel> | prisma.dietLabel
  }
  updatedietLabel: {
    type: 'dietLabel'
    args: Record<MutationUpdatedietLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: dietLabelUpdateInput, where: dietLabelWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabel | null> | prisma.dietLabel | null
  }
  updateManydietLabels: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManydietLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: dietLabelUpdateManyMutationInput, where?: dietLabelWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertdietLabel: {
    type: 'dietLabel'
    args: Record<MutationUpsertdietLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: dietLabelWhereUniqueInput, create: dietLabelCreateInput, update: dietLabelUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabel> | prisma.dietLabel
  }
  deletedietLabel: {
    type: 'dietLabel'
    args: Record<MutationDeletedietLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: dietLabelWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabel | null> | prisma.dietLabel | null
  }
  deleteManydietLabels: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManydietLabelsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: dietLabelWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'recipe', args?: SubscriptionRecipeArgs[] | false, alias?: string  } 
  | { name: 'recipeList', args?: SubscriptionRecipeListArgs[] | false, alias?: string  } 
  | { name: 'healthLabel', args?: SubscriptionHealthLabelArgs[] | false, alias?: string  } 
  | { name: 'dietLabel', args?: SubscriptionDietLabelArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'recipe'
  | 'recipeList'
  | 'healthLabel'
  | 'dietLabel'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionRecipeArgs =
  | 'where'
type SubscriptionRecipeListArgs =
  | 'where'
type SubscriptionHealthLabelArgs =
  | 'where'
type SubscriptionDietLabelArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  recipe: {
    type: 'RecipeSubscriptionPayload'
    args: Record<SubscriptionRecipeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RecipeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeSubscriptionPayload | null> | prisma.RecipeSubscriptionPayload | null
  }
  recipeList: {
    type: 'RecipeListSubscriptionPayload'
    args: Record<SubscriptionRecipeListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RecipeListSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeListSubscriptionPayload | null> | prisma.RecipeListSubscriptionPayload | null
  }
  healthLabel: {
    type: 'healthLabelSubscriptionPayload'
    args: Record<SubscriptionHealthLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: healthLabelSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabelSubscriptionPayload | null> | prisma.healthLabelSubscriptionPayload | null
  }
  dietLabel: {
    type: 'dietLabelSubscriptionPayload'
    args: Record<SubscriptionDietLabelArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: dietLabelSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabelSubscriptionPayload | null> | prisma.dietLabelSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'password'
  | 'name'
  | 'email'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RecipeSubscriptionPayload

type RecipeSubscriptionPayloadObject =
  | RecipeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RecipeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RecipeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Recipe'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RecipeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Recipe | null> | prisma.Recipe | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RecipePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RecipeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipePreviousValues | null> | prisma.RecipePreviousValues | null
  }
}
  

// Types for RecipePreviousValues

type RecipePreviousValuesObject =
  | RecipePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'label', args?: [] | false, alias?: string  } 
  | { name: 'uri', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'servings', args?: [] | false, alias?: string  } 
  | { name: 'calories', args?: [] | false, alias?: string  } 
  | { name: 'totalWeight', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type RecipePreviousValuesFields =
  | 'id'
  | 'label'
  | 'uri'
  | 'image'
  | 'servings'
  | 'calories'
  | 'totalWeight'
  | 'createdAt'
  | 'updatedAt'



  

export interface RecipePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  label: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  uri: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  servings: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  calories: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  totalWeight: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RecipeListSubscriptionPayload

type RecipeListSubscriptionPayloadObject =
  | RecipeListSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RecipeListSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RecipeListSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RecipeListSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'RecipeList'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RecipeListSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeList | null> | prisma.RecipeList | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RecipeListPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RecipeListSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RecipeListPreviousValues | null> | prisma.RecipeListPreviousValues | null
  }
}
  

// Types for RecipeListPreviousValues

type RecipeListPreviousValuesObject =
  | RecipeListPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type RecipeListPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface RecipeListPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for healthLabelSubscriptionPayload

type healthLabelSubscriptionPayloadObject =
  | healthLabelSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type healthLabelSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface healthLabelSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"healthLabelSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'healthLabel'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"healthLabelSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabel | null> | prisma.healthLabel | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'healthLabelPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"healthLabelSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.healthLabelPreviousValues | null> | prisma.healthLabelPreviousValues | null
  }
}
  

// Types for healthLabelPreviousValues

type healthLabelPreviousValuesObject =
  | healthLabelPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'label', args?: [] | false, alias?: string  } 

type healthLabelPreviousValuesFields =
  | 'id'
  | 'label'



  

export interface healthLabelPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  label: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for dietLabelSubscriptionPayload

type dietLabelSubscriptionPayloadObject =
  | dietLabelSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type dietLabelSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface dietLabelSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"dietLabelSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'dietLabel'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"dietLabelSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabel | null> | prisma.dietLabel | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'dietLabelPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"dietLabelSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.dietLabelPreviousValues | null> | prisma.dietLabelPreviousValues | null
  }
}
  

// Types for dietLabelPreviousValues

type dietLabelPreviousValuesObject =
  | dietLabelPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'label', args?: [] | false, alias?: string  } 

type dietLabelPreviousValuesFields =
  | 'id'
  | 'label'



  

export interface dietLabelPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  label: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface RecipeListWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  recipes_every?: RecipeWhereInput | null
  recipes_some?: RecipeWhereInput | null
  recipes_none?: RecipeWhereInput | null
  user?: UserWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: RecipeListWhereInput[]
  OR?: RecipeListWhereInput[]
  NOT?: RecipeListWhereInput[]
}
export type RecipeListWhereInputInputObject =
  | Extract<keyof RecipeListWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'recipes_every', alias?: string  } 
  | { name: 'recipes_some', alias?: string  } 
  | { name: 'recipes_none', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RecipeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  label?: string | null
  label_not?: string | null
  label_in?: string[]
  label_not_in?: string[]
  label_lt?: string | null
  label_lte?: string | null
  label_gt?: string | null
  label_gte?: string | null
  label_contains?: string | null
  label_not_contains?: string | null
  label_starts_with?: string | null
  label_not_starts_with?: string | null
  label_ends_with?: string | null
  label_not_ends_with?: string | null
  uri?: string | null
  uri_not?: string | null
  uri_in?: string[]
  uri_not_in?: string[]
  uri_lt?: string | null
  uri_lte?: string | null
  uri_gt?: string | null
  uri_gte?: string | null
  uri_contains?: string | null
  uri_not_contains?: string | null
  uri_starts_with?: string | null
  uri_not_starts_with?: string | null
  uri_ends_with?: string | null
  uri_not_ends_with?: string | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  servings?: number | null
  servings_not?: number | null
  servings_in?: number[]
  servings_not_in?: number[]
  servings_lt?: number | null
  servings_lte?: number | null
  servings_gt?: number | null
  servings_gte?: number | null
  calories?: number | null
  calories_not?: number | null
  calories_in?: number[]
  calories_not_in?: number[]
  calories_lt?: number | null
  calories_lte?: number | null
  calories_gt?: number | null
  calories_gte?: number | null
  totalWeight?: number | null
  totalWeight_not?: number | null
  totalWeight_in?: number[]
  totalWeight_not_in?: number[]
  totalWeight_lt?: number | null
  totalWeight_lte?: number | null
  totalWeight_gt?: number | null
  totalWeight_gte?: number | null
  healthLabels_every?: healthLabelWhereInput | null
  healthLabels_some?: healthLabelWhereInput | null
  healthLabels_none?: healthLabelWhereInput | null
  dietLabels_every?: dietLabelWhereInput | null
  dietLabels_some?: dietLabelWhereInput | null
  dietLabels_none?: dietLabelWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: RecipeWhereInput[]
  OR?: RecipeWhereInput[]
  NOT?: RecipeWhereInput[]
}
export type RecipeWhereInputInputObject =
  | Extract<keyof RecipeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'label_not', alias?: string  } 
  | { name: 'label_in', alias?: string  } 
  | { name: 'label_not_in', alias?: string  } 
  | { name: 'label_lt', alias?: string  } 
  | { name: 'label_lte', alias?: string  } 
  | { name: 'label_gt', alias?: string  } 
  | { name: 'label_gte', alias?: string  } 
  | { name: 'label_contains', alias?: string  } 
  | { name: 'label_not_contains', alias?: string  } 
  | { name: 'label_starts_with', alias?: string  } 
  | { name: 'label_not_starts_with', alias?: string  } 
  | { name: 'label_ends_with', alias?: string  } 
  | { name: 'label_not_ends_with', alias?: string  } 
  | { name: 'uri', alias?: string  } 
  | { name: 'uri_not', alias?: string  } 
  | { name: 'uri_in', alias?: string  } 
  | { name: 'uri_not_in', alias?: string  } 
  | { name: 'uri_lt', alias?: string  } 
  | { name: 'uri_lte', alias?: string  } 
  | { name: 'uri_gt', alias?: string  } 
  | { name: 'uri_gte', alias?: string  } 
  | { name: 'uri_contains', alias?: string  } 
  | { name: 'uri_not_contains', alias?: string  } 
  | { name: 'uri_starts_with', alias?: string  } 
  | { name: 'uri_not_starts_with', alias?: string  } 
  | { name: 'uri_ends_with', alias?: string  } 
  | { name: 'uri_not_ends_with', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'servings', alias?: string  } 
  | { name: 'servings_not', alias?: string  } 
  | { name: 'servings_in', alias?: string  } 
  | { name: 'servings_not_in', alias?: string  } 
  | { name: 'servings_lt', alias?: string  } 
  | { name: 'servings_lte', alias?: string  } 
  | { name: 'servings_gt', alias?: string  } 
  | { name: 'servings_gte', alias?: string  } 
  | { name: 'calories', alias?: string  } 
  | { name: 'calories_not', alias?: string  } 
  | { name: 'calories_in', alias?: string  } 
  | { name: 'calories_not_in', alias?: string  } 
  | { name: 'calories_lt', alias?: string  } 
  | { name: 'calories_lte', alias?: string  } 
  | { name: 'calories_gt', alias?: string  } 
  | { name: 'calories_gte', alias?: string  } 
  | { name: 'totalWeight', alias?: string  } 
  | { name: 'totalWeight_not', alias?: string  } 
  | { name: 'totalWeight_in', alias?: string  } 
  | { name: 'totalWeight_not_in', alias?: string  } 
  | { name: 'totalWeight_lt', alias?: string  } 
  | { name: 'totalWeight_lte', alias?: string  } 
  | { name: 'totalWeight_gt', alias?: string  } 
  | { name: 'totalWeight_gte', alias?: string  } 
  | { name: 'healthLabels_every', alias?: string  } 
  | { name: 'healthLabels_some', alias?: string  } 
  | { name: 'healthLabels_none', alias?: string  } 
  | { name: 'dietLabels_every', alias?: string  } 
  | { name: 'dietLabels_some', alias?: string  } 
  | { name: 'dietLabels_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface healthLabelWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  label?: string | null
  label_not?: string | null
  label_in?: string[]
  label_not_in?: string[]
  label_lt?: string | null
  label_lte?: string | null
  label_gt?: string | null
  label_gte?: string | null
  label_contains?: string | null
  label_not_contains?: string | null
  label_starts_with?: string | null
  label_not_starts_with?: string | null
  label_ends_with?: string | null
  label_not_ends_with?: string | null
  AND?: healthLabelWhereInput[]
  OR?: healthLabelWhereInput[]
  NOT?: healthLabelWhereInput[]
}
export type healthLabelWhereInputInputObject =
  | Extract<keyof healthLabelWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'label_not', alias?: string  } 
  | { name: 'label_in', alias?: string  } 
  | { name: 'label_not_in', alias?: string  } 
  | { name: 'label_lt', alias?: string  } 
  | { name: 'label_lte', alias?: string  } 
  | { name: 'label_gt', alias?: string  } 
  | { name: 'label_gte', alias?: string  } 
  | { name: 'label_contains', alias?: string  } 
  | { name: 'label_not_contains', alias?: string  } 
  | { name: 'label_starts_with', alias?: string  } 
  | { name: 'label_not_starts_with', alias?: string  } 
  | { name: 'label_ends_with', alias?: string  } 
  | { name: 'label_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface dietLabelWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  label?: string | null
  label_not?: string | null
  label_in?: string[]
  label_not_in?: string[]
  label_lt?: string | null
  label_lte?: string | null
  label_gt?: string | null
  label_gte?: string | null
  label_contains?: string | null
  label_not_contains?: string | null
  label_starts_with?: string | null
  label_not_starts_with?: string | null
  label_ends_with?: string | null
  label_not_ends_with?: string | null
  AND?: dietLabelWhereInput[]
  OR?: dietLabelWhereInput[]
  NOT?: dietLabelWhereInput[]
}
export type dietLabelWhereInputInputObject =
  | Extract<keyof dietLabelWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'label_not', alias?: string  } 
  | { name: 'label_in', alias?: string  } 
  | { name: 'label_not_in', alias?: string  } 
  | { name: 'label_lt', alias?: string  } 
  | { name: 'label_lte', alias?: string  } 
  | { name: 'label_gt', alias?: string  } 
  | { name: 'label_gte', alias?: string  } 
  | { name: 'label_contains', alias?: string  } 
  | { name: 'label_not_contains', alias?: string  } 
  | { name: 'label_starts_with', alias?: string  } 
  | { name: 'label_not_starts_with', alias?: string  } 
  | { name: 'label_ends_with', alias?: string  } 
  | { name: 'label_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  recipeLists_every?: RecipeListWhereInput | null
  recipeLists_some?: RecipeListWhereInput | null
  recipeLists_none?: RecipeListWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'recipeLists_every', alias?: string  } 
  | { name: 'recipeLists_some', alias?: string  } 
  | { name: 'recipeLists_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RecipeWhereUniqueInput {
  id?: string | null
  uri?: string | null
}
export type RecipeWhereUniqueInputInputObject =
  | Extract<keyof RecipeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'uri', alias?: string  } 
  
export interface RecipeListWhereUniqueInput {
  id?: string | null
}
export type RecipeListWhereUniqueInputInputObject =
  | Extract<keyof RecipeListWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface healthLabelWhereUniqueInput {
  id?: string | null
  label?: string | null
}
export type healthLabelWhereUniqueInputInputObject =
  | Extract<keyof healthLabelWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'label', alias?: string  } 
  
export interface dietLabelWhereUniqueInput {
  id?: string | null
  label?: string | null
}
export type dietLabelWhereUniqueInputInputObject =
  | Extract<keyof dietLabelWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'label', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  password?: string
  name?: string
  email?: string
  recipeLists?: RecipeListCreateManyWithoutUserInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'recipeLists', alias?: string  } 
  
export interface RecipeListCreateManyWithoutUserInput {
  create?: RecipeListCreateWithoutUserInput[]
  connect?: RecipeListWhereUniqueInput[]
}
export type RecipeListCreateManyWithoutUserInputInputObject =
  | Extract<keyof RecipeListCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RecipeListCreateWithoutUserInput {
  id?: string | null
  name?: string
  recipes?: RecipeCreateManyInput | null
}
export type RecipeListCreateWithoutUserInputInputObject =
  | Extract<keyof RecipeListCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'recipes', alias?: string  } 
  
export interface RecipeCreateManyInput {
  create?: RecipeCreateInput[]
  connect?: RecipeWhereUniqueInput[]
}
export type RecipeCreateManyInputInputObject =
  | Extract<keyof RecipeCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RecipeCreateInput {
  id?: string | null
  label?: string
  uri?: string
  image?: string
  servings?: number
  calories?: number
  totalWeight?: number
  healthLabels?: healthLabelCreateManyInput | null
  dietLabels?: dietLabelCreateManyInput | null
}
export type RecipeCreateInputInputObject =
  | Extract<keyof RecipeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'uri', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'servings', alias?: string  } 
  | { name: 'calories', alias?: string  } 
  | { name: 'totalWeight', alias?: string  } 
  | { name: 'healthLabels', alias?: string  } 
  | { name: 'dietLabels', alias?: string  } 
  
export interface healthLabelCreateManyInput {
  create?: healthLabelCreateInput[]
  connect?: healthLabelWhereUniqueInput[]
}
export type healthLabelCreateManyInputInputObject =
  | Extract<keyof healthLabelCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface healthLabelCreateInput {
  id?: string | null
  label?: string
}
export type healthLabelCreateInputInputObject =
  | Extract<keyof healthLabelCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'label', alias?: string  } 
  
export interface dietLabelCreateManyInput {
  create?: dietLabelCreateInput[]
  connect?: dietLabelWhereUniqueInput[]
}
export type dietLabelCreateManyInputInputObject =
  | Extract<keyof dietLabelCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface dietLabelCreateInput {
  id?: string | null
  label?: string
}
export type dietLabelCreateInputInputObject =
  | Extract<keyof dietLabelCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'label', alias?: string  } 
  
export interface UserUpdateInput {
  password?: string | null
  name?: string | null
  email?: string | null
  recipeLists?: RecipeListUpdateManyWithoutUserInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'recipeLists', alias?: string  } 
  
export interface RecipeListUpdateManyWithoutUserInput {
  create?: RecipeListCreateWithoutUserInput[]
  delete?: RecipeListWhereUniqueInput[]
  connect?: RecipeListWhereUniqueInput[]
  set?: RecipeListWhereUniqueInput[]
  disconnect?: RecipeListWhereUniqueInput[]
  update?: RecipeListUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: RecipeListUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: RecipeListScalarWhereInput[]
  updateMany?: RecipeListUpdateManyWithWhereNestedInput[]
}
export type RecipeListUpdateManyWithoutUserInputInputObject =
  | Extract<keyof RecipeListUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface RecipeListUpdateWithWhereUniqueWithoutUserInput {
  where?: RecipeListWhereUniqueInput
  data?: RecipeListUpdateWithoutUserDataInput
}
export type RecipeListUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof RecipeListUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface RecipeListUpdateWithoutUserDataInput {
  name?: string | null
  recipes?: RecipeUpdateManyInput | null
}
export type RecipeListUpdateWithoutUserDataInputInputObject =
  | Extract<keyof RecipeListUpdateWithoutUserDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'recipes', alias?: string  } 
  
export interface RecipeUpdateManyInput {
  create?: RecipeCreateInput[]
  update?: RecipeUpdateWithWhereUniqueNestedInput[]
  upsert?: RecipeUpsertWithWhereUniqueNestedInput[]
  delete?: RecipeWhereUniqueInput[]
  connect?: RecipeWhereUniqueInput[]
  set?: RecipeWhereUniqueInput[]
  disconnect?: RecipeWhereUniqueInput[]
  deleteMany?: RecipeScalarWhereInput[]
  updateMany?: RecipeUpdateManyWithWhereNestedInput[]
}
export type RecipeUpdateManyInputInputObject =
  | Extract<keyof RecipeUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface RecipeUpdateWithWhereUniqueNestedInput {
  where?: RecipeWhereUniqueInput
  data?: RecipeUpdateDataInput
}
export type RecipeUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof RecipeUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface RecipeUpdateDataInput {
  label?: string | null
  uri?: string | null
  image?: string | null
  servings?: number | null
  calories?: number | null
  totalWeight?: number | null
  healthLabels?: healthLabelUpdateManyInput | null
  dietLabels?: dietLabelUpdateManyInput | null
}
export type RecipeUpdateDataInputInputObject =
  | Extract<keyof RecipeUpdateDataInput, string>
  | { name: 'label', alias?: string  } 
  | { name: 'uri', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'servings', alias?: string  } 
  | { name: 'calories', alias?: string  } 
  | { name: 'totalWeight', alias?: string  } 
  | { name: 'healthLabels', alias?: string  } 
  | { name: 'dietLabels', alias?: string  } 
  
export interface healthLabelUpdateManyInput {
  create?: healthLabelCreateInput[]
  update?: healthLabelUpdateWithWhereUniqueNestedInput[]
  upsert?: healthLabelUpsertWithWhereUniqueNestedInput[]
  delete?: healthLabelWhereUniqueInput[]
  connect?: healthLabelWhereUniqueInput[]
  set?: healthLabelWhereUniqueInput[]
  disconnect?: healthLabelWhereUniqueInput[]
  deleteMany?: healthLabelScalarWhereInput[]
  updateMany?: healthLabelUpdateManyWithWhereNestedInput[]
}
export type healthLabelUpdateManyInputInputObject =
  | Extract<keyof healthLabelUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface healthLabelUpdateWithWhereUniqueNestedInput {
  where?: healthLabelWhereUniqueInput
  data?: healthLabelUpdateDataInput
}
export type healthLabelUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof healthLabelUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface healthLabelUpdateDataInput {
  label?: string | null
}
export type healthLabelUpdateDataInputInputObject =
  | Extract<keyof healthLabelUpdateDataInput, string>
  | { name: 'label', alias?: string  } 
  
export interface healthLabelUpsertWithWhereUniqueNestedInput {
  where?: healthLabelWhereUniqueInput
  update?: healthLabelUpdateDataInput
  create?: healthLabelCreateInput
}
export type healthLabelUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof healthLabelUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface healthLabelScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  label?: string | null
  label_not?: string | null
  label_in?: string[]
  label_not_in?: string[]
  label_lt?: string | null
  label_lte?: string | null
  label_gt?: string | null
  label_gte?: string | null
  label_contains?: string | null
  label_not_contains?: string | null
  label_starts_with?: string | null
  label_not_starts_with?: string | null
  label_ends_with?: string | null
  label_not_ends_with?: string | null
  AND?: healthLabelScalarWhereInput[]
  OR?: healthLabelScalarWhereInput[]
  NOT?: healthLabelScalarWhereInput[]
}
export type healthLabelScalarWhereInputInputObject =
  | Extract<keyof healthLabelScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'label_not', alias?: string  } 
  | { name: 'label_in', alias?: string  } 
  | { name: 'label_not_in', alias?: string  } 
  | { name: 'label_lt', alias?: string  } 
  | { name: 'label_lte', alias?: string  } 
  | { name: 'label_gt', alias?: string  } 
  | { name: 'label_gte', alias?: string  } 
  | { name: 'label_contains', alias?: string  } 
  | { name: 'label_not_contains', alias?: string  } 
  | { name: 'label_starts_with', alias?: string  } 
  | { name: 'label_not_starts_with', alias?: string  } 
  | { name: 'label_ends_with', alias?: string  } 
  | { name: 'label_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface healthLabelUpdateManyWithWhereNestedInput {
  where?: healthLabelScalarWhereInput
  data?: healthLabelUpdateManyDataInput
}
export type healthLabelUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof healthLabelUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface healthLabelUpdateManyDataInput {
  label?: string | null
}
export type healthLabelUpdateManyDataInputInputObject =
  | Extract<keyof healthLabelUpdateManyDataInput, string>
  | { name: 'label', alias?: string  } 
  
export interface dietLabelUpdateManyInput {
  create?: dietLabelCreateInput[]
  update?: dietLabelUpdateWithWhereUniqueNestedInput[]
  upsert?: dietLabelUpsertWithWhereUniqueNestedInput[]
  delete?: dietLabelWhereUniqueInput[]
  connect?: dietLabelWhereUniqueInput[]
  set?: dietLabelWhereUniqueInput[]
  disconnect?: dietLabelWhereUniqueInput[]
  deleteMany?: dietLabelScalarWhereInput[]
  updateMany?: dietLabelUpdateManyWithWhereNestedInput[]
}
export type dietLabelUpdateManyInputInputObject =
  | Extract<keyof dietLabelUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface dietLabelUpdateWithWhereUniqueNestedInput {
  where?: dietLabelWhereUniqueInput
  data?: dietLabelUpdateDataInput
}
export type dietLabelUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof dietLabelUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface dietLabelUpdateDataInput {
  label?: string | null
}
export type dietLabelUpdateDataInputInputObject =
  | Extract<keyof dietLabelUpdateDataInput, string>
  | { name: 'label', alias?: string  } 
  
export interface dietLabelUpsertWithWhereUniqueNestedInput {
  where?: dietLabelWhereUniqueInput
  update?: dietLabelUpdateDataInput
  create?: dietLabelCreateInput
}
export type dietLabelUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof dietLabelUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface dietLabelScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  label?: string | null
  label_not?: string | null
  label_in?: string[]
  label_not_in?: string[]
  label_lt?: string | null
  label_lte?: string | null
  label_gt?: string | null
  label_gte?: string | null
  label_contains?: string | null
  label_not_contains?: string | null
  label_starts_with?: string | null
  label_not_starts_with?: string | null
  label_ends_with?: string | null
  label_not_ends_with?: string | null
  AND?: dietLabelScalarWhereInput[]
  OR?: dietLabelScalarWhereInput[]
  NOT?: dietLabelScalarWhereInput[]
}
export type dietLabelScalarWhereInputInputObject =
  | Extract<keyof dietLabelScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'label_not', alias?: string  } 
  | { name: 'label_in', alias?: string  } 
  | { name: 'label_not_in', alias?: string  } 
  | { name: 'label_lt', alias?: string  } 
  | { name: 'label_lte', alias?: string  } 
  | { name: 'label_gt', alias?: string  } 
  | { name: 'label_gte', alias?: string  } 
  | { name: 'label_contains', alias?: string  } 
  | { name: 'label_not_contains', alias?: string  } 
  | { name: 'label_starts_with', alias?: string  } 
  | { name: 'label_not_starts_with', alias?: string  } 
  | { name: 'label_ends_with', alias?: string  } 
  | { name: 'label_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface dietLabelUpdateManyWithWhereNestedInput {
  where?: dietLabelScalarWhereInput
  data?: dietLabelUpdateManyDataInput
}
export type dietLabelUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof dietLabelUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface dietLabelUpdateManyDataInput {
  label?: string | null
}
export type dietLabelUpdateManyDataInputInputObject =
  | Extract<keyof dietLabelUpdateManyDataInput, string>
  | { name: 'label', alias?: string  } 
  
export interface RecipeUpsertWithWhereUniqueNestedInput {
  where?: RecipeWhereUniqueInput
  update?: RecipeUpdateDataInput
  create?: RecipeCreateInput
}
export type RecipeUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof RecipeUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface RecipeScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  label?: string | null
  label_not?: string | null
  label_in?: string[]
  label_not_in?: string[]
  label_lt?: string | null
  label_lte?: string | null
  label_gt?: string | null
  label_gte?: string | null
  label_contains?: string | null
  label_not_contains?: string | null
  label_starts_with?: string | null
  label_not_starts_with?: string | null
  label_ends_with?: string | null
  label_not_ends_with?: string | null
  uri?: string | null
  uri_not?: string | null
  uri_in?: string[]
  uri_not_in?: string[]
  uri_lt?: string | null
  uri_lte?: string | null
  uri_gt?: string | null
  uri_gte?: string | null
  uri_contains?: string | null
  uri_not_contains?: string | null
  uri_starts_with?: string | null
  uri_not_starts_with?: string | null
  uri_ends_with?: string | null
  uri_not_ends_with?: string | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  servings?: number | null
  servings_not?: number | null
  servings_in?: number[]
  servings_not_in?: number[]
  servings_lt?: number | null
  servings_lte?: number | null
  servings_gt?: number | null
  servings_gte?: number | null
  calories?: number | null
  calories_not?: number | null
  calories_in?: number[]
  calories_not_in?: number[]
  calories_lt?: number | null
  calories_lte?: number | null
  calories_gt?: number | null
  calories_gte?: number | null
  totalWeight?: number | null
  totalWeight_not?: number | null
  totalWeight_in?: number[]
  totalWeight_not_in?: number[]
  totalWeight_lt?: number | null
  totalWeight_lte?: number | null
  totalWeight_gt?: number | null
  totalWeight_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: RecipeScalarWhereInput[]
  OR?: RecipeScalarWhereInput[]
  NOT?: RecipeScalarWhereInput[]
}
export type RecipeScalarWhereInputInputObject =
  | Extract<keyof RecipeScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'label_not', alias?: string  } 
  | { name: 'label_in', alias?: string  } 
  | { name: 'label_not_in', alias?: string  } 
  | { name: 'label_lt', alias?: string  } 
  | { name: 'label_lte', alias?: string  } 
  | { name: 'label_gt', alias?: string  } 
  | { name: 'label_gte', alias?: string  } 
  | { name: 'label_contains', alias?: string  } 
  | { name: 'label_not_contains', alias?: string  } 
  | { name: 'label_starts_with', alias?: string  } 
  | { name: 'label_not_starts_with', alias?: string  } 
  | { name: 'label_ends_with', alias?: string  } 
  | { name: 'label_not_ends_with', alias?: string  } 
  | { name: 'uri', alias?: string  } 
  | { name: 'uri_not', alias?: string  } 
  | { name: 'uri_in', alias?: string  } 
  | { name: 'uri_not_in', alias?: string  } 
  | { name: 'uri_lt', alias?: string  } 
  | { name: 'uri_lte', alias?: string  } 
  | { name: 'uri_gt', alias?: string  } 
  | { name: 'uri_gte', alias?: string  } 
  | { name: 'uri_contains', alias?: string  } 
  | { name: 'uri_not_contains', alias?: string  } 
  | { name: 'uri_starts_with', alias?: string  } 
  | { name: 'uri_not_starts_with', alias?: string  } 
  | { name: 'uri_ends_with', alias?: string  } 
  | { name: 'uri_not_ends_with', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'servings', alias?: string  } 
  | { name: 'servings_not', alias?: string  } 
  | { name: 'servings_in', alias?: string  } 
  | { name: 'servings_not_in', alias?: string  } 
  | { name: 'servings_lt', alias?: string  } 
  | { name: 'servings_lte', alias?: string  } 
  | { name: 'servings_gt', alias?: string  } 
  | { name: 'servings_gte', alias?: string  } 
  | { name: 'calories', alias?: string  } 
  | { name: 'calories_not', alias?: string  } 
  | { name: 'calories_in', alias?: string  } 
  | { name: 'calories_not_in', alias?: string  } 
  | { name: 'calories_lt', alias?: string  } 
  | { name: 'calories_lte', alias?: string  } 
  | { name: 'calories_gt', alias?: string  } 
  | { name: 'calories_gte', alias?: string  } 
  | { name: 'totalWeight', alias?: string  } 
  | { name: 'totalWeight_not', alias?: string  } 
  | { name: 'totalWeight_in', alias?: string  } 
  | { name: 'totalWeight_not_in', alias?: string  } 
  | { name: 'totalWeight_lt', alias?: string  } 
  | { name: 'totalWeight_lte', alias?: string  } 
  | { name: 'totalWeight_gt', alias?: string  } 
  | { name: 'totalWeight_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RecipeUpdateManyWithWhereNestedInput {
  where?: RecipeScalarWhereInput
  data?: RecipeUpdateManyDataInput
}
export type RecipeUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof RecipeUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface RecipeUpdateManyDataInput {
  label?: string | null
  uri?: string | null
  image?: string | null
  servings?: number | null
  calories?: number | null
  totalWeight?: number | null
}
export type RecipeUpdateManyDataInputInputObject =
  | Extract<keyof RecipeUpdateManyDataInput, string>
  | { name: 'label', alias?: string  } 
  | { name: 'uri', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'servings', alias?: string  } 
  | { name: 'calories', alias?: string  } 
  | { name: 'totalWeight', alias?: string  } 
  
export interface RecipeListUpsertWithWhereUniqueWithoutUserInput {
  where?: RecipeListWhereUniqueInput
  update?: RecipeListUpdateWithoutUserDataInput
  create?: RecipeListCreateWithoutUserInput
}
export type RecipeListUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof RecipeListUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface RecipeListScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: RecipeListScalarWhereInput[]
  OR?: RecipeListScalarWhereInput[]
  NOT?: RecipeListScalarWhereInput[]
}
export type RecipeListScalarWhereInputInputObject =
  | Extract<keyof RecipeListScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RecipeListUpdateManyWithWhereNestedInput {
  where?: RecipeListScalarWhereInput
  data?: RecipeListUpdateManyDataInput
}
export type RecipeListUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof RecipeListUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface RecipeListUpdateManyDataInput {
  name?: string | null
}
export type RecipeListUpdateManyDataInputInputObject =
  | Extract<keyof RecipeListUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  password?: string | null
  name?: string | null
  email?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface RecipeUpdateInput {
  label?: string | null
  uri?: string | null
  image?: string | null
  servings?: number | null
  calories?: number | null
  totalWeight?: number | null
  healthLabels?: healthLabelUpdateManyInput | null
  dietLabels?: dietLabelUpdateManyInput | null
}
export type RecipeUpdateInputInputObject =
  | Extract<keyof RecipeUpdateInput, string>
  | { name: 'label', alias?: string  } 
  | { name: 'uri', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'servings', alias?: string  } 
  | { name: 'calories', alias?: string  } 
  | { name: 'totalWeight', alias?: string  } 
  | { name: 'healthLabels', alias?: string  } 
  | { name: 'dietLabels', alias?: string  } 
  
export interface RecipeUpdateManyMutationInput {
  label?: string | null
  uri?: string | null
  image?: string | null
  servings?: number | null
  calories?: number | null
  totalWeight?: number | null
}
export type RecipeUpdateManyMutationInputInputObject =
  | Extract<keyof RecipeUpdateManyMutationInput, string>
  | { name: 'label', alias?: string  } 
  | { name: 'uri', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'servings', alias?: string  } 
  | { name: 'calories', alias?: string  } 
  | { name: 'totalWeight', alias?: string  } 
  
export interface RecipeListCreateInput {
  id?: string | null
  name?: string
  recipes?: RecipeCreateManyInput | null
  user?: UserCreateOneWithoutRecipeListsInput
}
export type RecipeListCreateInputInputObject =
  | Extract<keyof RecipeListCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'recipes', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutRecipeListsInput {
  create?: UserCreateWithoutRecipeListsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutRecipeListsInputInputObject =
  | Extract<keyof UserCreateOneWithoutRecipeListsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutRecipeListsInput {
  id?: string | null
  password?: string
  name?: string
  email?: string
}
export type UserCreateWithoutRecipeListsInputInputObject =
  | Extract<keyof UserCreateWithoutRecipeListsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface RecipeListUpdateInput {
  name?: string | null
  recipes?: RecipeUpdateManyInput | null
  user?: UserUpdateOneRequiredWithoutRecipeListsInput | null
}
export type RecipeListUpdateInputInputObject =
  | Extract<keyof RecipeListUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'recipes', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutRecipeListsInput {
  create?: UserCreateWithoutRecipeListsInput | null
  update?: UserUpdateWithoutRecipeListsDataInput | null
  upsert?: UserUpsertWithoutRecipeListsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutRecipeListsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutRecipeListsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutRecipeListsDataInput {
  password?: string | null
  name?: string | null
  email?: string | null
}
export type UserUpdateWithoutRecipeListsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutRecipeListsDataInput, string>
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface UserUpsertWithoutRecipeListsInput {
  update?: UserUpdateWithoutRecipeListsDataInput
  create?: UserCreateWithoutRecipeListsInput
}
export type UserUpsertWithoutRecipeListsInputInputObject =
  | Extract<keyof UserUpsertWithoutRecipeListsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface RecipeListUpdateManyMutationInput {
  name?: string | null
}
export type RecipeListUpdateManyMutationInputInputObject =
  | Extract<keyof RecipeListUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface healthLabelUpdateInput {
  label?: string | null
}
export type healthLabelUpdateInputInputObject =
  | Extract<keyof healthLabelUpdateInput, string>
  | { name: 'label', alias?: string  } 
  
export interface healthLabelUpdateManyMutationInput {
  label?: string | null
}
export type healthLabelUpdateManyMutationInputInputObject =
  | Extract<keyof healthLabelUpdateManyMutationInput, string>
  | { name: 'label', alias?: string  } 
  
export interface dietLabelUpdateInput {
  label?: string | null
}
export type dietLabelUpdateInputInputObject =
  | Extract<keyof dietLabelUpdateInput, string>
  | { name: 'label', alias?: string  } 
  
export interface dietLabelUpdateManyMutationInput {
  label?: string | null
}
export type dietLabelUpdateManyMutationInputInputObject =
  | Extract<keyof dietLabelUpdateManyMutationInput, string>
  | { name: 'label', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RecipeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RecipeWhereInput | null
  AND?: RecipeSubscriptionWhereInput[]
  OR?: RecipeSubscriptionWhereInput[]
  NOT?: RecipeSubscriptionWhereInput[]
}
export type RecipeSubscriptionWhereInputInputObject =
  | Extract<keyof RecipeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RecipeListSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RecipeListWhereInput | null
  AND?: RecipeListSubscriptionWhereInput[]
  OR?: RecipeListSubscriptionWhereInput[]
  NOT?: RecipeListSubscriptionWhereInput[]
}
export type RecipeListSubscriptionWhereInputInputObject =
  | Extract<keyof RecipeListSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface healthLabelSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: healthLabelWhereInput | null
  AND?: healthLabelSubscriptionWhereInput[]
  OR?: healthLabelSubscriptionWhereInput[]
  NOT?: healthLabelSubscriptionWhereInput[]
}
export type healthLabelSubscriptionWhereInputInputObject =
  | Extract<keyof healthLabelSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface dietLabelSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: dietLabelWhereInput | null
  AND?: dietLabelSubscriptionWhereInput[]
  OR?: dietLabelSubscriptionWhereInput[]
  NOT?: dietLabelSubscriptionWhereInput[]
}
export type dietLabelSubscriptionWhereInputInputObject =
  | Extract<keyof dietLabelSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type RecipeListOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type RecipeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'label_ASC'
  | 'label_DESC'
  | 'uri_ASC'
  | 'uri_DESC'
  | 'image_ASC'
  | 'image_DESC'
  | 'servings_ASC'
  | 'servings_DESC'
  | 'calories_ASC'
  | 'calories_DESC'
  | 'totalWeight_ASC'
  | 'totalWeight_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type healthLabelOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'label_ASC'
  | 'label_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type dietLabelOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'label_ASC'
  | 'label_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  